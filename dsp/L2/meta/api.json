{
    "api_list": [
        {
            "api_name": "xf::dsp::aie::convert_sym_taps_to_asym",
            "target_domain": "AIE",
            "spec": {
                "brief": "convert_sym_taps_to_asym is an helper function to convert users input coefficient array.",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "convert_sym_taps_to_asym",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_COEFF",
                        "description": "describes the type of individual coefficients of the filter taps."
                    }
                ],
                "header_file_name": [
                    "fir_graph_utils.hpp"
                ],
                "instance": "function",
                "api_name": "xf::dsp::aie::convert_sym_taps_to_asym",
                "ports": [
                    {
                        "direction": "inout",
                        "type": "TT_COEFF *",
                        "name": "tapsOut"
                    },
                    {
                        "direction": "input",
                        "type": "unsigned int",
                        "name": "fLen"
                    },
                    {
                        "direction": "input",
                        "type": "TT_COEFF *",
                        "name": "tapsIn"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::convert_hb_taps_to_asym",
            "target_domain": "AIE",
            "spec": {
                "brief": "convert_hb_taps_to_asym is an helper function to convert users input coefficient array.",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "convert_hb_taps_to_asym",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_COEFF",
                        "description": "describes the type of individual coefficients of the filter taps."
                    }
                ],
                "header_file_name": [
                    "fir_graph_utils.hpp"
                ],
                "instance": "function",
                "api_name": "xf::dsp::aie::convert_hb_taps_to_asym",
                "ports": [
                    {
                        "direction": "inout",
                        "type": "TT_COEFF *",
                        "name": "tapsOut"
                    },
                    {
                        "direction": "input",
                        "type": "unsigned int",
                        "name": "hbFirLen"
                    },
                    {
                        "direction": "input",
                        "type": "TT_COEFF *",
                        "name": "tapsIn"
                    },
                    {
                        "direction": "input",
                        "type": "unsigned int",
                        "name": "ssr"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::fft::windowfn::getHammingWindow",
            "target_domain": "AIE",
            "spec": {
                "brief": "getHammingWindow is utility to create Hamming window.",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "getHammingWindow",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "T_C",
                        "description": "describes the type of weights in the FFT window."
                    }
                ],
                "header_file_name": [
                    "fft_window_fns.hpp"
                ],
                "instance": "function",
                "api_name": "xf::dsp::aie::fft::windowfn::getHammingWindow",
                "ports": [
                    {
                        "direction": "output",
                        "type": "T_C *",
                        "name": "weights"
                    },
                    {
                        "direction": "input",
                        "type": "const unsigned int",
                        "name": "pointSize"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::fft::windowfn::getHannWindow",
            "target_domain": "AIE",
            "spec": {
                "brief": "getHannWindow is utility to create Hann window.",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "getHannWindow",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "T_C",
                        "description": "describes the type of weights in the FFT window."
                    }
                ],
                "header_file_name": [
                    "fft_window_fns.hpp"
                ],
                "instance": "function",
                "api_name": "xf::dsp::aie::fft::windowfn::getHannWindow",
                "ports": [
                    {
                        "direction": "output",
                        "type": "T_C *",
                        "name": "weights"
                    },
                    {
                        "direction": "input",
                        "type": "const unsigned int",
                        "name": "pointSize"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::fft::windowfn::getBlackmanWindow",
            "target_domain": "AIE",
            "spec": {
                "brief": "getBlackmanWindow is utility to create Hamming window.",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "getBlackmanWindow",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "T_C",
                        "description": "describes the type of weights in the FFT window."
                    }
                ],
                "header_file_name": [
                    "fft_window_fns.hpp"
                ],
                "instance": "function",
                "api_name": "xf::dsp::aie::fft::windowfn::getBlackmanWindow",
                "ports": [
                    {
                        "direction": "output",
                        "type": "T_C *",
                        "name": "weights"
                    },
                    {
                        "direction": "input",
                        "type": "const unsigned int",
                        "name": "pointSize"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::fft::windowfn::getKaiserWindow",
            "target_domain": "AIE",
            "spec": {
                "brief": "geKeiserWindow is utility to create Hamming window.",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "getKaiserWindow",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "T_C",
                        "description": "describes the type of weights in the FFT window."
                    }
                ],
                "header_file_name": [
                    "fft_window_fns.hpp"
                ],
                "instance": "function",
                "api_name": "xf::dsp::aie::fft::windowfn::getKaiserWindow",
                "ports": [
                    {
                        "direction": "output",
                        "type": "T_C *",
                        "name": "weights"
                    },
                    {
                        "direction": "input",
                        "type": "const unsigned int",
                        "name": "pointSize"
                    },
                    {
                        "direction": "input",
                        "type": "const float",
                        "name": "alpha"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::fft::windowfn::getRotationMatrix",
            "target_domain": "AIE",
            "spec": {
                "brief": "getRotationVector is utility to populate the window with rotation value for the 2D-like implementation of FFT.",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "getRotationMatrix",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "T_C",
                        "description": "describes the type of weights in the FFT window."
                    }
                ],
                "header_file_name": [
                    "fft_window_fns.hpp"
                ],
                "instance": "function",
                "api_name": "xf::dsp::aie::fft::windowfn::getRotationMatrix",
                "ports": [
                    {
                        "direction": "output",
                        "type": "T_C *",
                        "name": "weights"
                    },
                    {
                        "direction": "input",
                        "type": "const unsigned int",
                        "name": "pointSize"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::bitonic_sort::bitonic_sort_graph",
            "target_domain": "AIE",
            "spec": {
                "brief": "Bitonic Sort is a parallel sorting algorithm with an asymptotic complexity of log2(n)*(log2(n)+1)/2",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "bitonic_sort_graph",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_DATA",
                        "description": "describes the type of individual data samples input to the function. This is a typename and must be one of the following:"
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DIM",
                        "description": "describes the number of samples in the list."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_NUM_FRAMES",
                        "description": "describes the number of lists to sort per call to the kernel."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_ASCENDING",
                        "description": "describes whether to sort the list in descending (0) or ascending (1) order."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_CASC_LEN",
                        "description": "describes the number of tiles to cascade computation across to increase throughput."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SSR",
                        "description": "describes the number of"
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_INDEX",
                        "description": "This parameter is for internal use regarding the recursion of the parallel power feature."
                    }
                ],
                "header_file_name": [
                    "bitonic_sort_graph.hpp"
                ],
                "instance": "class",
                "api_name": "xf::dsp::aie::bitonic_sort::bitonic_sort_graph",
                "ports": [
                    {
                        "direction": "input",
                        "type": "port_array<input, TP_SSR> xf::dsp::aie::bitonic_sort::bitonic_sort_graph< TT_DATA, TP_DIM, TP_NUM_FRAMES, TP_ASCENDING, TP_CASC_LEN, TP_SSR, TP_INDEX >::in",
                        "name": "in"
                    },
                    {
                        "direction": "output",
                        "type": "port_array<output, 1> xf::dsp::aie::bitonic_sort::bitonic_sort_graph< TT_DATA, TP_DIM, TP_NUM_FRAMES, TP_ASCENDING, TP_CASC_LEN, TP_SSR, TP_INDEX >::out",
                        "name": "out"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::blas::matrix_mult::matrix_mult_graph",
            "target_domain": "AIE",
            "spec": {
                "brief": "performs a General Matrix Multiply (GEMM), taking two input matrices of configurable dimensions and data type.",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "matrix_mult_graph",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_DATA_A",
                        "description": "describes the type of individual data samples input of Matrix A to the gemm function."
                    },
                    {
                        "type": "typename",
                        "name": "TT_DATA_B",
                        "description": "describes the type of individual data samples input of Matrix B to the gemm function."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DIM_A",
                        "description": "is an unsigned integer which describes the number of elements along the unique dimension (rows) of Matrix A."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DIM_AB",
                        "description": "is an unsigned integer which describes the number of elements along the common dimension of Matrix A (columns) and Matrix B (rows)."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DIM_B",
                        "description": "is an unsigned integer which describes the number of elements along the unique dimension (columns) of Matrix B."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SHIFT",
                        "description": "describes power of 2 shift down applied to the accumulation of product terms before each output."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_RND",
                        "description": "describes the selection of rounding to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DIM_A_LEADING",
                        "description": "describes the scheme in which the data should be stored in memory. ROW_MAJOR = 0, COL_MAJOR = 1. Note, a COL_MAJOR matrix can be transposed to become a ROW_MAJOR matrix."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DIM_B_LEADING",
                        "description": "describes the scheme in which the data should be stored in memory. ROW_MAJOR = 0, COL_MAJOR = 1."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DIM_OUT_LEADING",
                        "description": "describes the scheme in which the data should be stored in memory. ROW_MAJOR = 0, COL_MAJOR = 1."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_ADD_TILING_A",
                        "description": "describes wether or not to add an additional kernel to rearrange the matrix samples into their required position."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_ADD_TILING_B",
                        "description": "describes wether or not to add an additional kernel to rearrange the matrix samples into their required position."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_ADD_DETILING_OUT",
                        "description": "describes wether or not to add an additional kernel to rearrange the matrix samples into their required position."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_INPUT_WINDOW_VSIZE_A",
                        "description": "describes the number of samples in the window API used for input to Matrix A."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_INPUT_WINDOW_VSIZE_B",
                        "description": "describes the number of samples in the window API used for input to Matrix B."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_CASC_LEN",
                        "description": "describes the number of AIE kernels the matrix multiplication will be divided into in series."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SAT",
                        "description": "describes the selection of saturation to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SSR",
                        "description": "describes the number of kernels (or cascaded kernel chains) that will compute the matrix multiplication in parallel. Each SSR rank will receive an equal sized split (along the unique dimension) of Matrix A data."
                    },
                    {
                        "type": "typename",
                        "name": "TT_OUT_DATA",
                        "description": "describes the type of data samples in the output matrix."
                    }
                ],
                "header_file_name": [
                    "matrix_mult_graph.hpp"
                ],
                "instance": "class",
                "api_name": "xf::dsp::aie::blas::matrix_mult::matrix_mult_graph",
                "ports": [
                    {
                        "direction": "input",
                        "type": "port<input> xf::dsp::aie::blas::matrix_mult::matrix_mult_graph< TT_DATA_A, TT_DATA_B, TP_DIM_A, TP_DIM_AB, TP_DIM_B, TP_SHIFT, TP_RND, TP_DIM_A_LEADING, TP_DIM_B_LEADING, TP_DIM_OUT_LEADING, TP_ADD_TILING_A, TP_ADD_TILING_B, TP_ADD_DETILING_OUT, TP_INPUT_WINDOW_VSIZE_A, TP_INPUT_WINDOW_VSIZE_B, TP_CASC_LEN, TP_SAT, TP_SSR, TT_OUT_DATA >::inA[TP_CASC_LEN *TP_SSR]",
                        "name": "inA"
                    },
                    {
                        "direction": "input",
                        "type": "port<input> xf::dsp::aie::blas::matrix_mult::matrix_mult_graph< TT_DATA_A, TT_DATA_B, TP_DIM_A, TP_DIM_AB, TP_DIM_B, TP_SHIFT, TP_RND, TP_DIM_A_LEADING, TP_DIM_B_LEADING, TP_DIM_OUT_LEADING, TP_ADD_TILING_A, TP_ADD_TILING_B, TP_ADD_DETILING_OUT, TP_INPUT_WINDOW_VSIZE_A, TP_INPUT_WINDOW_VSIZE_B, TP_CASC_LEN, TP_SAT, TP_SSR, TT_OUT_DATA >::inB[TP_CASC_LEN *TP_SSR]",
                        "name": "inB"
                    },
                    {
                        "direction": "output",
                        "type": "port<output> xf::dsp::aie::blas::matrix_mult::matrix_mult_graph< TT_DATA_A, TT_DATA_B, TP_DIM_A, TP_DIM_AB, TP_DIM_B, TP_SHIFT, TP_RND, TP_DIM_A_LEADING, TP_DIM_B_LEADING, TP_DIM_OUT_LEADING, TP_ADD_TILING_A, TP_ADD_TILING_B, TP_ADD_DETILING_OUT, TP_INPUT_WINDOW_VSIZE_A, TP_INPUT_WINDOW_VSIZE_B, TP_CASC_LEN, TP_SAT, TP_SSR, TT_OUT_DATA >::out[TP_SSR]",
                        "name": "out"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::blas::matrix_vector_mul::matrix_vector_mul_graph",
            "target_domain": "AIE",
            "spec": {
                "brief": "performs the General Matrix Vector Multiplier (GEMV) which multiplies a matrix input with a vector input of configurable data types and dimensions.",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "matrix_vector_mul_graph",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_DATA_A",
                        "description": "describes the data type of the input samples of Matrix A."
                    },
                    {
                        "type": "typename",
                        "name": "TT_DATA_B",
                        "description": "describes the data type of the input samples of Vector B."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DIM_A",
                        "description": "is an unsigned integer which describes the number of elements along the unique dimension (rows) of Matrix A."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DIM_B",
                        "description": "is an unsigned integer which describes the number of elements in Vector B and the number of columns in Matrix A."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SHIFT",
                        "description": "describes power of 2 shift down applied to the accumulation of FIR terms before output."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_RND",
                        "description": "describes the selection of rounding to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_NUM_FRAMES",
                        "description": "describes the number of batches of input data that will be processed per iteration."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_CASC_LEN",
                        "description": "describes the number of AIE kernels the matrix-vector multiplication will be divided into in series."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SAT",
                        "description": "describes the selection of saturation to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SSR",
                        "description": "describes the number of kernels (or cascaded kernel chains) that will compute the matrix-vector multiplication in parallel. Each SSR rank will receive an equal sized split (along the unique dimension) of Matrix A data."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DIM_A_LEADING",
                        "description": "describes the leading dimension of the Matrix A data. If TP_DIM_A_LEADING=1, the elements of the matrix columns are contiguous in memory. This is the only supported order of Matrix A input data for computation."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_USE_MATRIX_RELOAD",
                        "description": "describes whether the input Matrix A is provided via an RTP port. This allows the user to provide and reload Matrix values at runtime. The matrix provided to the RTP will be used for successive iterations until updated with new values. The column elements of the RTP matrix input must be contiguous in memory (TP_DIM_A_LEADING = 1). The matrix data must be split according to TP_SSR and TP_CASC_LEN requirements, and each kernel in the design must receive its correct portion of the matrix via the RTP ports."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_API",
                        "description": "describes the interface of the vector input (iobuffer or stream) when using reloadable matrix inputs (TP_USE_MATRIX_RELOAD = 1). If TP_USE_MATRIX_RELOAD = 0, the vector must be provided via iobuffer port(s) (TP_API = 0)."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DUAL_IP",
                        "description": "describes whether dual inputs are used for the Vector B port(s) when TP_API = 1 and TP_USE_MATRIX_RELOAD = 1."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_NUM_OUTPUTS",
                        "description": "describes the number of outputs used when TP_API = 1 and TP_USE_MATRIX_RELOAD = 1."
                    }
                ],
                "header_file_name": [
                    "matrix_vector_mul_graph.hpp"
                ],
                "instance": "class",
                "api_name": "xf::dsp::aie::blas::matrix_vector_mul::matrix_vector_mul_graph",
                "ports": [
                    {
                        "direction": "input",
                        "type": "port_conditional_array<input, (TP_USE_MATRIX_RELOAD == 0), (TP_SSR * TP_CASC_LEN)> xf::dsp::aie::blas::matrix_vector_mul::matrix_vector_mul_graph< TT_DATA_A, TT_DATA_B, TP_DIM_A, TP_DIM_B, TP_SHIFT, TP_RND, TP_NUM_FRAMES, TP_CASC_LEN, TP_SAT, TP_SSR, TP_DIM_A_LEADING, TP_USE_MATRIX_RELOAD, TP_API, TP_DUAL_IP, TP_NUM_OUTPUTS >::inA",
                        "name": "inA"
                    },
                    {
                        "direction": "input",
                        "type": "port_conditional_array<input, (TP_USE_MATRIX_RELOAD == 1), (TP_SSR * TP_CASC_LEN)> xf::dsp::aie::blas::matrix_vector_mul::matrix_vector_mul_graph< TT_DATA_A, TT_DATA_B, TP_DIM_A, TP_DIM_B, TP_SHIFT, TP_RND, TP_NUM_FRAMES, TP_CASC_LEN, TP_SAT, TP_SSR, TP_DIM_A_LEADING, TP_USE_MATRIX_RELOAD, TP_API, TP_DUAL_IP, TP_NUM_OUTPUTS >::matrixA",
                        "name": "matrixA"
                    },
                    {
                        "direction": "input",
                        "type": "port<input> xf::dsp::aie::blas::matrix_vector_mul::matrix_vector_mul_graph< TT_DATA_A, TT_DATA_B, TP_DIM_A, TP_DIM_B, TP_SHIFT, TP_RND, TP_NUM_FRAMES, TP_CASC_LEN, TP_SAT, TP_SSR, TP_DIM_A_LEADING, TP_USE_MATRIX_RELOAD, TP_API, TP_DUAL_IP, TP_NUM_OUTPUTS >::inB[TP_SSR *TP_CASC_LEN *(TP_DUAL_IP+1)]",
                        "name": "inB"
                    },
                    {
                        "direction": "output",
                        "type": "port<output> xf::dsp::aie::blas::matrix_vector_mul::matrix_vector_mul_graph< TT_DATA_A, TT_DATA_B, TP_DIM_A, TP_DIM_B, TP_SHIFT, TP_RND, TP_NUM_FRAMES, TP_CASC_LEN, TP_SAT, TP_SSR, TP_DIM_A_LEADING, TP_USE_MATRIX_RELOAD, TP_API, TP_DUAL_IP, TP_NUM_OUTPUTS >::out[TP_SSR *(TP_NUM_OUTPUTS)]",
                        "name": "out"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::conv_corr::conv_corr_graph",
            "target_domain": "AIE",
            "spec": {
                "brief": "Convolution / Correlation of input vectors F and G.",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "conv_corr_graph",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_DATA_F",
                        "description": "describes the type of individual data samples of signal F to input to the function."
                    },
                    {
                        "type": "typename",
                        "name": "TT_DATA_G",
                        "description": "describes the type of individual data samples of signal G to input to the function."
                    },
                    {
                        "type": "typename",
                        "name": "TT_DATA_OUT",
                        "description": "describes the type individual data samples at the function output."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_FUNCT_TYPE",
                        "description": "describes the selection of function i.e convolution or correlation."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_COMPUTE_MODE",
                        "description": "describes the computation mode of conv/corr. we have 3 modes which are"
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_F_LEN",
                        "description": "describes the number of samples in vector F."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_G_LEN",
                        "description": "describes the number of samples in vector G."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SHIFT",
                        "description": "describes the number of bits to downshift."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_API",
                        "description": "describes whether to use streams (1) or windows (0)."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_RND",
                        "description": "describes the selection of rounding to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SAT",
                        "description": "describes the selection of saturation to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_NUM_FRAMES",
                        "description": "describes the number of frames of input data samples that occur within each input window of data."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_CASC_LEN",
                        "description": "describes the number of AIE processors to split the operation over."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_PHASES",
                        "description": "specifies the number of parallel input/output paths where samples are interleaved between paths, giving an overall higher throughput."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_USE_RTP_VECTOR_LENGTHS",
                        "description": "allows the user to select if runtime vector lengths should be used."
                    }
                ],
                "header_file_name": [
                    "conv_corr_graph.hpp"
                ],
                "instance": "class",
                "api_name": "xf::dsp::aie::conv_corr::conv_corr_graph",
                "ports": [
                    {
                        "direction": "input",
                        "type": "port_array<input, TP_PHASES> xf::dsp::aie::conv_corr::conv_corr_graph< TT_DATA_F, TT_DATA_G, TT_DATA_OUT, TP_FUNCT_TYPE, TP_COMPUTE_MODE, TP_F_LEN, TP_G_LEN, TP_SHIFT, TP_API, TP_RND, TP_SAT, TP_NUM_FRAMES, TP_CASC_LEN, TP_PHASES, TP_USE_RTP_VECTOR_LENGTHS >::inF",
                        "name": "inF"
                    },
                    {
                        "direction": "input",
                        "type": "input_port xf::dsp::aie::conv_corr::conv_corr_graph< TT_DATA_F, TT_DATA_G, TT_DATA_OUT, TP_FUNCT_TYPE, TP_COMPUTE_MODE, TP_F_LEN, TP_G_LEN, TP_SHIFT, TP_API, TP_RND, TP_SAT, TP_NUM_FRAMES, TP_CASC_LEN, TP_PHASES, TP_USE_RTP_VECTOR_LENGTHS >::inG",
                        "name": "inG"
                    },
                    {
                        "direction": "output",
                        "type": "port_array<output, TP_PHASES> xf::dsp::aie::conv_corr::conv_corr_graph< TT_DATA_F, TT_DATA_G, TT_DATA_OUT, TP_FUNCT_TYPE, TP_COMPUTE_MODE, TP_F_LEN, TP_G_LEN, TP_SHIFT, TP_API, TP_RND, TP_SAT, TP_NUM_FRAMES, TP_CASC_LEN, TP_PHASES, TP_USE_RTP_VECTOR_LENGTHS >::out",
                        "name": "out"
                    },
                    {
                        "direction": "input",
                        "type": "port_conditional_array<input, (TP_USE_RTP_VECTOR_LENGTHS == 1), 1> xf::dsp::aie::conv_corr::conv_corr_graph< TT_DATA_F, TT_DATA_G, TT_DATA_OUT, TP_FUNCT_TYPE, TP_COMPUTE_MODE, TP_F_LEN, TP_G_LEN, TP_SHIFT, TP_API, TP_RND, TP_SAT, TP_NUM_FRAMES, TP_CASC_LEN, TP_PHASES, TP_USE_RTP_VECTOR_LENGTHS >::rtpVecLen",
                        "name": "rtpVecLen"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::euclidean_distance::euclidean_distance_graph",
            "target_domain": "AIE",
            "spec": {
                "brief": "of input vectors P and Q",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "euclidean_distance_graph",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_DATA",
                        "description": "describes the type of individual data samples of point P and Q with N Dimensions to input to the function."
                    },
                    {
                        "type": "typename",
                        "name": "TT_DATA_OUT",
                        "description": "describes the type of individual data samples of output from the function."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_LEN",
                        "description": "describes the number of samples of input (Points P and Q) and ouput vector."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DIM",
                        "description": "describes the Dimension of plane for the point P and Q."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_API",
                        "description": "describes whether to use streams (1) or windows (0)."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_RND",
                        "description": "describes the selection of rounding to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SAT",
                        "description": "describes the selection of saturation to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_IS_OUTPUT_SQUARED",
                        "description": "describes about ED's output is either SQUAED or SQRT as per user request."
                    }
                ],
                "header_file_name": [
                    "euclidean_distance_graph.hpp"
                ],
                "instance": "class",
                "api_name": "xf::dsp::aie::euclidean_distance::euclidean_distance_graph",
                "ports": [
                    {
                        "direction": "input",
                        "type": "input_port xf::dsp::aie::euclidean_distance::euclidean_distance_graph< TT_DATA, TT_DATA_OUT, TP_LEN, TP_DIM, TP_API, TP_RND, TP_SAT, TP_IS_OUTPUT_SQUARED >::inWindowP",
                        "name": "inWindowP"
                    },
                    {
                        "direction": "input",
                        "type": "input_port xf::dsp::aie::euclidean_distance::euclidean_distance_graph< TT_DATA, TT_DATA_OUT, TP_LEN, TP_DIM, TP_API, TP_RND, TP_SAT, TP_IS_OUTPUT_SQUARED >::inWindowQ",
                        "name": "inWindowQ"
                    },
                    {
                        "direction": "output",
                        "type": "output_port xf::dsp::aie::euclidean_distance::euclidean_distance_graph< TT_DATA, TT_DATA_OUT, TP_LEN, TP_DIM, TP_API, TP_RND, TP_SAT, TP_IS_OUTPUT_SQUARED >::outWindow",
                        "name": "outWindow"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::mixer::dds_mixer::dds_mixer_graph",
            "target_domain": "AIE",
            "spec": {
                "brief": "operates in 3 modes:",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "dds_mixer_graph",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_DATA",
                        "description": "describes the type of individual data samples input to and output from the"
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_INPUT_WINDOW_VSIZE",
                        "description": "describes the number of samples in the input/output buffer API or number of samples to process per iteration."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_MIXER_MODE",
                        "description": "describes the mode of operation of the"
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_API",
                        "description": "specifies if the input/output interface should be buffer-based or stream-based."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SSR",
                        "description": "specifies the super sample rate, ie how much data input/output in parallel for a single channel."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_RND",
                        "description": "describes the selection of rounding to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SAT",
                        "description": "describes the selection of saturation to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_USE_PHASE_RELOAD",
                        "description": "allows the user to select if runtime phase offset should be used."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_PHASE_RELOAD_API",
                        "description": "defines the form of the phase_offset port."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_USE_PHASE_INC_RELOAD",
                        "description": "allows the user to select if phase increment can be changed at runtimed."
                    }
                ],
                "header_file_name": [
                    "dds_mixer_graph.hpp"
                ],
                "instance": "class",
                "api_name": "xf::dsp::aie::mixer::dds_mixer::dds_mixer_graph",
                "ports": [
                    {
                        "direction": "input",
                        "type": "port_conditional_array<input, (TP_USE_PHASE_RELOAD == 1), TP_SSR> xf::dsp::aie::mixer::dds_mixer::dds_mixer_graph< TT_DATA, TP_INPUT_WINDOW_VSIZE, TP_MIXER_MODE, TP_API, TP_SSR, TP_RND, TP_SAT, TP_USE_PHASE_RELOAD, TP_PHASE_RELOAD_API, TP_USE_PHASE_INC_RELOAD >::PhaseRTP",
                        "name": "PhaseRTP"
                    },
                    {
                        "direction": "input",
                        "type": "port_conditional_array<input, (TP_USE_PHASE_INC_RELOAD == 1), TP_SSR> xf::dsp::aie::mixer::dds_mixer::dds_mixer_graph< TT_DATA, TP_INPUT_WINDOW_VSIZE, TP_MIXER_MODE, TP_API, TP_SSR, TP_RND, TP_SAT, TP_USE_PHASE_RELOAD, TP_PHASE_RELOAD_API, TP_USE_PHASE_INC_RELOAD >::PhaseIncRTP",
                        "name": "PhaseIncRTP"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::mixer::dds_mixer::dds_mixer_lut_graph",
            "target_domain": "AIE",
            "spec": {
                "brief": "operates in 3 modes:",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "dds_mixer_lut_graph",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_DATA",
                        "description": "describes the type of individual data samples input to and output from the"
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_MIXER_MODE",
                        "description": "describes the mode of operation of the"
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SFDR",
                        "description": "specifies the expected Spurious Free Dynamic Range that the useR expects from the generated"
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_API",
                        "description": "specifies if the input/output interface should be buffer-based or stream-based."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_INPUT_WINDOW_VSIZE",
                        "description": "describes the number of samples in the input/output buffer API"
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SSR",
                        "description": "specifies the super sample rate, ie how much data input/output in parallel for a single channel."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_RND",
                        "description": "describes the selection of rounding to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SAT",
                        "description": "describes the selection of saturation to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_USE_PHASE_RELOAD",
                        "description": "allows the user to select if runtime phase offset should be used."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_PHASE_RELOAD_API",
                        "description": "defines the form of the phase_offset port."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_USE_PHASE_INC_RELOAD",
                        "description": "allows the user to select if phase increment can be changed at runtimed."
                    }
                ],
                "header_file_name": [
                    "dds_mixer_lut_graph.hpp"
                ],
                "instance": "class",
                "api_name": "xf::dsp::aie::mixer::dds_mixer::dds_mixer_lut_graph",
                "ports": [
                    {
                        "direction": "input",
                        "type": "port_conditional_array<input, (TP_USE_PHASE_RELOAD == 1), TP_SSR> xf::dsp::aie::mixer::dds_mixer::dds_mixer_lut_graph< TT_DATA, TP_MIXER_MODE, TP_SFDR, TP_API, TP_INPUT_WINDOW_VSIZE, TP_SSR, TP_RND, TP_SAT, TP_USE_PHASE_RELOAD, TP_PHASE_RELOAD_API, TP_USE_PHASE_INC_RELOAD >::PhaseRTP",
                        "name": "PhaseRTP"
                    },
                    {
                        "direction": "input",
                        "type": "port_conditional_array<input, (TP_USE_PHASE_INC_RELOAD == 1), TP_SSR> xf::dsp::aie::mixer::dds_mixer::dds_mixer_lut_graph< TT_DATA, TP_MIXER_MODE, TP_SFDR, TP_API, TP_INPUT_WINDOW_VSIZE, TP_SSR, TP_RND, TP_SAT, TP_USE_PHASE_RELOAD, TP_PHASE_RELOAD_API, TP_USE_PHASE_INC_RELOAD >::PhaseIncRTP",
                        "name": "PhaseIncRTP"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::fft::dft::dft_graph",
            "target_domain": "AIE",
            "spec": {
                "brief": "dft performs the Discrete Fourier Transform on a set of data samples",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "dft_graph",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_DATA",
                        "description": "describes the type of individual data samples input to the function."
                    },
                    {
                        "type": "typename",
                        "name": "TT_TWIDDLE",
                        "description": "describes the type of twiddle factors used in the transform."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_POINT_SIZE",
                        "description": "describes the number of samples in the frame to be windowed."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_FFT_NIFFT",
                        "description": "selects whether the transform to perform is an forward (1) or reverse (0) transform."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SHIFT",
                        "description": "selects the power of 2 to scale the result by prior to output."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_CASC_LEN",
                        "description": "selects the number of kernels the DFT will be split over in series to improve throughput"
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_NUM_FRAMES",
                        "description": "describes the number of frames of input data samples that occur within each input window of data."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_RND",
                        "description": "describes the selection of rounding to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SAT",
                        "description": "describes the selection of saturation to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SSR",
                        "description": "selects number cascade chains that will operate in parallel. The kernels in each SSR rank will receive the same input data as the kernels in all other SSR ranks."
                    }
                ],
                "header_file_name": [
                    "dft_graph.hpp"
                ],
                "instance": "class",
                "api_name": "xf::dsp::aie::fft::dft::dft_graph",
                "ports": [
                    {
                        "direction": "input",
                        "type": "port<input> xf::dsp::aie::fft::dft::dft_graph< TT_DATA, TT_TWIDDLE, TP_POINT_SIZE, TP_FFT_NIFFT, TP_SHIFT, TP_CASC_LEN, TP_NUM_FRAMES, TP_RND, TP_SAT, TP_SSR >::in[TP_SSR *TP_CASC_LEN]",
                        "name": "in"
                    },
                    {
                        "direction": "output",
                        "type": "port<output> xf::dsp::aie::fft::dft::dft_graph< TT_DATA, TT_TWIDDLE, TP_POINT_SIZE, TP_FFT_NIFFT, TP_SHIFT, TP_CASC_LEN, TP_NUM_FRAMES, TP_RND, TP_SAT, TP_SSR >::out[TP_SSR]",
                        "name": "out"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::fft::dit_1ch::fft_ifft_dit_1ch_graph",
            "target_domain": "AIE",
            "spec": {
                "brief": "fft_dit_1ch is a single-channel, decimation-in-time FFT.",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "fft_ifft_dit_1ch_graph",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_DATA",
                        "description": "describes the type of individual data samples input to the transform function."
                    },
                    {
                        "type": "typename",
                        "name": "TT_TWIDDLE",
                        "description": "describes the type of twiddle factors of the transform."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_POINT_SIZE",
                        "description": "is an unsigned integer which describes the number of samples in the transform."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_FFT_NIFFT",
                        "description": "selects whether the transform to perform is an FFT (1) or IFFT (0)."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SHIFT",
                        "description": "selects the power of 2 to scale the result by prior to output."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_CASC_LEN",
                        "description": "selects the number of kernels the FFT will be divided over in series to improve throughput"
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DYN_PT_SIZE",
                        "description": "selects whether (1) or not (0) to use run-time point size determination."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_WINDOW_VSIZE",
                        "description": "is an unsigned integer which describes the number of samples to be processed in each call"
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_API",
                        "description": "is an unsigned integer to select window (0) or stream (1) interfaces."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_PARALLEL_POWER",
                        "description": "is an unsigned integer to describe N where 2^N is the numbers of subframe processors to use, so as to achieve higher throughput."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_USE_WIDGETS",
                        "description": "is an unsigned integer to control the use of widgets for configurations which either use TP_API=1 or TP_PARALLEL_POWER>0."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_RND",
                        "description": "describes the selection of rounding to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SAT",
                        "description": "describes the selection of saturation to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_TWIDDLE_MODE",
                        "description": "describes the magnitude of integer twiddles. It has no effect for cfloat."
                    },
                    {
                        "type": "typename",
                        "name": "TT_OUT_DATA",
                        "description": "describes the type of individual data samples output from the transform function."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_INDEX",
                        "description": "This parameter is for internal use regarding the recursion of the parallel power feature."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_ORIG_PAR_POWER",
                        "description": "This parameter is for internal use regarding the recursion of the parallel power feature."
                    }
                ],
                "header_file_name": [
                    "fft_ifft_dit_1ch_graph.hpp"
                ],
                "instance": "class",
                "api_name": "xf::dsp::aie::fft::dit_1ch::fft_ifft_dit_1ch_graph",
                "ports": [
                    {
                        "direction": "input",
                        "type": "port_array<input, kPortsPerTile * kParallel_factor> xf::dsp::aie::fft::dit_1ch::fft_ifft_dit_1ch_graph< TT_DATA, TT_TWIDDLE, TP_POINT_SIZE, TP_FFT_NIFFT, TP_SHIFT, TP_CASC_LEN, TP_DYN_PT_SIZE, TP_WINDOW_VSIZE, TP_API, TP_PARALLEL_POWER, TP_USE_WIDGETS, TP_RND, TP_SAT, TP_TWIDDLE_MODE, TT_OUT_DATA, TP_INDEX, TP_ORIG_PAR_POWER >::in",
                        "name": "in"
                    },
                    {
                        "direction": "output",
                        "type": "port_array<output, kOutputPorts> xf::dsp::aie::fft::dit_1ch::fft_ifft_dit_1ch_graph< TT_DATA, TT_TWIDDLE, TP_POINT_SIZE, TP_FFT_NIFFT, TP_SHIFT, TP_CASC_LEN, TP_DYN_PT_SIZE, TP_WINDOW_VSIZE, TP_API, TP_PARALLEL_POWER, TP_USE_WIDGETS, TP_RND, TP_SAT, TP_TWIDDLE_MODE, TT_OUT_DATA, TP_INDEX, TP_ORIG_PAR_POWER >::out",
                        "name": "out"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::fft::mixed_radix_fft::mixed_radix_fft_graph",
            "target_domain": "AIE",
            "spec": {
                "brief": "is a single-channel, decimation-in-time, FFT including radix3 or radix5 stages.",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "mixed_radix_fft_graph",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_DATA",
                        "description": "describes the type of individual data samples input to and output from the transform function."
                    },
                    {
                        "type": "typename",
                        "name": "TT_TWIDDLE",
                        "description": "describes the type of twiddle factors of the transform."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_POINT_SIZE",
                        "description": "is an unsigned integer which describes the number of samples in the transform. This values must factorize to powers of 2, 3 and 5. When TP_DYN_PT_SIZE is set, TP_POINT_SIZE describes the maximum point size possible."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_FFT_NIFFT",
                        "description": "selects whether the transform to perform is an FFT (1) or IFFT (0)."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SHIFT",
                        "description": "selects the power of 2 to scale the result by prior to output."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_RND",
                        "description": "selects the rounding mode."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SAT",
                        "description": "describes the selection of saturation to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_WINDOW_VSIZE",
                        "description": "is an unsigned integer which describes the number of samples to be processed in each call"
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_CASC_LEN",
                        "description": "selects the number of kernels the FFT will be divided over in series to improve throughput"
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_API",
                        "description": "is an unsigned integer to select window (0) or stream (1) interfaces. When stream I/O is selected, one sample is taken from, or output to, a stream and the next sample from or two the next stream. Two streams minimum are used. In this example, even samples are read from input stream[0] and odd samples from input stream[1]."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DYN_PT_SIZE",
                        "description": "is an unsigned int to select static point size (0) or dynamic (1) point size. With TP_DYN_PT_SIZE set to 1, there are two input ports. For the first, the user must provide a header input that"
                    }
                ],
                "header_file_name": [
                    "mixed_radix_fft_graph.hpp"
                ],
                "instance": "class",
                "api_name": "xf::dsp::aie::fft::mixed_radix_fft::mixed_radix_fft_graph",
                "ports": [
                    {
                        "direction": "input",
                        "type": "port_array<input, m_kNumPorts> xf::dsp::aie::fft::mixed_radix_fft::mixed_radix_fft_graph< TT_DATA, TT_TWIDDLE, TP_POINT_SIZE, TP_FFT_NIFFT, TP_SHIFT, TP_RND, TP_SAT, TP_WINDOW_VSIZE, TP_CASC_LEN, TP_API, TP_DYN_PT_SIZE >::in",
                        "name": "in"
                    },
                    {
                        "direction": "output",
                        "type": "port_array<output, m_kNumPorts> xf::dsp::aie::fft::mixed_radix_fft::mixed_radix_fft_graph< TT_DATA, TT_TWIDDLE, TP_POINT_SIZE, TP_FFT_NIFFT, TP_SHIFT, TP_RND, TP_SAT, TP_WINDOW_VSIZE, TP_CASC_LEN, TP_API, TP_DYN_PT_SIZE >::out",
                        "name": "out"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::fft::two_d::fft_ifft_2d_graph",
            "target_domain": "AIE",
            "spec": {
                "brief": "",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "fft_ifft_2d_graph",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_DATA_D1",
                        "description": "describes the type of individual data samples input to and output from the first transform function."
                    },
                    {
                        "type": "typename",
                        "name": "TT_DATA_D2",
                        "description": "describes the type of individual data samples input to and output from the second transform function."
                    },
                    {
                        "type": "typename",
                        "name": "TT_TWIDDLE",
                        "description": "describes the type of twiddle factors of the transform."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_POINT_SIZE_D1",
                        "description": "is an unsigned integer which describes the number of samples in the first transform."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_POINT_SIZE_D2",
                        "description": "is an unsigned integer which describes the number of samples in the second transform."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_FFT_NIFFT",
                        "description": "selects whether the transform to perform is an FFT (1) or IFFT (0)."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SHIFT",
                        "description": "selects the power of 2 to scale the result by prior to output."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_CASC_LEN",
                        "description": "selects the number of kernels the FFT will be divided over in series to improve throughput"
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_WINDOW_VSIZE_D1",
                        "description": "is an unsigned integer which describes the number of samples to be processed in each call to the"
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_WINDOW_VSIZE_D2",
                        "description": "is an unsigned integer which describes the number of samples to be processed in each call to the"
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_API",
                        "description": "is an unsigned integer to select window (0) or stream (1) interfaces. When stream I/O is selected, one sample is taken from, or output to, a stream and the next sample from or two the next stream. Two streams minimum are used. In this example, even samples are read from input stream[0] and odd samples from input stream[1]."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_RND",
                        "description": "describes the selection of rounding to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SAT",
                        "description": "describes the selection of saturation to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_TWIDDLE_MODE",
                        "description": "describes the magnitude of integer twiddles. It has no effect for cfloat."
                    }
                ],
                "header_file_name": [
                    "fft_ifft_2d_graph.hpp"
                ],
                "instance": "class",
                "api_name": "xf::dsp::aie::fft::two_d::fft_ifft_2d_graph",
                "ports": [
                    {
                        "direction": "input",
                        "type": "port_array<input, 1> xf::dsp::aie::fft::two_d::fft_ifft_2d_graph< TT_DATA_D1, TT_DATA_D2, TT_TWIDDLE, TP_POINT_SIZE_D1, TP_POINT_SIZE_D2, TP_FFT_NIFFT, TP_SHIFT, TP_CASC_LEN, TP_WINDOW_VSIZE_D1, TP_WINDOW_VSIZE_D2, TP_API, TP_RND, TP_SAT, TP_TWIDDLE_MODE >::in",
                        "name": "in"
                    },
                    {
                        "direction": "output",
                        "type": "port_array<output, 1> xf::dsp::aie::fft::two_d::fft_ifft_2d_graph< TT_DATA_D1, TT_DATA_D2, TT_TWIDDLE, TP_POINT_SIZE_D1, TP_POINT_SIZE_D2, TP_FFT_NIFFT, TP_SHIFT, TP_CASC_LEN, TP_WINDOW_VSIZE_D1, TP_WINDOW_VSIZE_D2, TP_API, TP_RND, TP_SAT, TP_TWIDDLE_MODE >::out",
                        "name": "out"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::fft::vss_1d::vss_fft_ifft_1d_graph",
            "target_domain": "AIE",
            "spec": {
                "brief": "vss_fft_ifft_1d is a single-channel, decomposed FFT that contains the AIE sub-part of the VSS FFT Mode 1 offering.",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "vss_fft_ifft_1d_graph",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_DATA",
                        "description": "describes the type of individual data samples input to and output from the transform function."
                    },
                    {
                        "type": "typename",
                        "name": "TT_TWIDDLE",
                        "description": "describes the type of twiddle factors of the transform."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_POINT_SIZE",
                        "description": "is an unsigned integer which describes the number of samples in the transform."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_FFT_NIFFT",
                        "description": "selects whether the transform to perform is an FFT (1) or IFFT (0)."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SHIFT",
                        "description": "selects the power of 2 to scale the result by prior to output."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_API",
                        "description": "is an unsigned integer to select window (0) or stream (1) interfaces. When stream I/O is selected, one sample is taken from, or output to, a stream and the next sample from or two the next stream. Two streams minimum are used. In this example, even samples are read from input stream[0] and odd samples from input stream[1]."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SSR",
                        "description": "is an unsigned integer to describe the number of parallel computational paths into which the implementation will be split to improve the performance. Higher SSR relates to higher performance."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_RND",
                        "description": "describes the selection of rounding to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SAT",
                        "description": "describes the selection of saturation to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_TWIDDLE_MODE",
                        "description": "describes the magnitude of integer twiddles. It has no effect for cfloat."
                    }
                ],
                "header_file_name": [
                    "vss_fft_ifft_1d_graph.hpp"
                ],
                "instance": "class",
                "api_name": "xf::dsp::aie::fft::vss_1d::vss_fft_ifft_1d_graph",
                "ports": [
                    {
                        "direction": "input",
                        "type": "port_array<input, TP_SSR> xf::dsp::aie::fft::vss_1d::vss_fft_ifft_1d_graph< TT_DATA, TT_TWIDDLE, TP_POINT_SIZE, TP_FFT_NIFFT, TP_SHIFT, TP_API, TP_SSR, TP_RND, TP_SAT, TP_TWIDDLE_MODE >::front_i",
                        "name": "front_i"
                    },
                    {
                        "direction": "input",
                        "type": "port_array<input, TP_SSR> xf::dsp::aie::fft::vss_1d::vss_fft_ifft_1d_graph< TT_DATA, TT_TWIDDLE, TP_POINT_SIZE, TP_FFT_NIFFT, TP_SHIFT, TP_API, TP_SSR, TP_RND, TP_SAT, TP_TWIDDLE_MODE >::back_i",
                        "name": "back_i"
                    },
                    {
                        "direction": "output",
                        "type": "port_array<output, TP_SSR> xf::dsp::aie::fft::vss_1d::vss_fft_ifft_1d_graph< TT_DATA, TT_TWIDDLE, TP_POINT_SIZE, TP_FFT_NIFFT, TP_SHIFT, TP_API, TP_SSR, TP_RND, TP_SAT, TP_TWIDDLE_MODE >::back_o",
                        "name": "back_o"
                    },
                    {
                        "direction": "output",
                        "type": "port_array<output, TP_SSR> xf::dsp::aie::fft::vss_1d::vss_fft_ifft_1d_graph< TT_DATA, TT_TWIDDLE, TP_POINT_SIZE, TP_FFT_NIFFT, TP_SHIFT, TP_API, TP_SSR, TP_RND, TP_SAT, TP_TWIDDLE_MODE >::front_o",
                        "name": "front_o"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::fft::windowfn::fft_window_graph",
            "target_domain": "AIE",
            "spec": {
                "brief": "fft_window is utility to apply a windowing (scaling) function such as Hamming to a frame of data samples.",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "fft_window_graph",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_DATA",
                        "description": "describes the type of individual data samples input to the function."
                    },
                    {
                        "type": "typename",
                        "name": "TT_COEFF",
                        "description": "describes the type of weights in the FFT window."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_POINT_SIZE",
                        "description": "describes the number of samples in the frame to be windowed."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_WINDOW_VSIZE",
                        "description": "describes the number of samples to be processed in each call to this function. It must be an integer multiple of TP_POINT_SIZE."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SHIFT",
                        "description": "described the number of bits to downshift after the scaling by the window value."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_API",
                        "description": "described whether to use streams (1) or windows (0)."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SSR",
                        "description": "describes the number of kernels to use in parallel to perform the windowing function."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DYN_PT_SIZE",
                        "description": "describes whether to support run-time selectable point size for the frames of data within the AIE window to be processed."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_RND",
                        "description": "describes the selection of rounding to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SAT",
                        "description": "describes the selection of saturation to be applied during the shift down stage of processing."
                    }
                ],
                "header_file_name": [
                    "fft_window_graph.hpp"
                ],
                "instance": "class",
                "api_name": "xf::dsp::aie::fft::windowfn::fft_window_graph",
                "ports": [
                    {
                        "direction": "input",
                        "type": "port_array<input, kAPIFactor * TP_SSR> xf::dsp::aie::fft::windowfn::fft_window_graph< TT_DATA, TT_COEFF, TP_POINT_SIZE, TP_WINDOW_VSIZE, TP_SHIFT, TP_API, TP_SSR, TP_DYN_PT_SIZE, TP_RND, TP_SAT >::in",
                        "name": "in"
                    },
                    {
                        "direction": "output",
                        "type": "port_array<output, kAPIFactor * TP_SSR> xf::dsp::aie::fft::windowfn::fft_window_graph< TT_DATA, TT_COEFF, TP_POINT_SIZE, TP_WINDOW_VSIZE, TP_SHIFT, TP_API, TP_SSR, TP_DYN_PT_SIZE, TP_RND, TP_SAT >::out",
                        "name": "out"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::fft_dit_2ch_real::fft_dit_2ch_real_graph",
            "target_domain": "AIE",
            "spec": {
                "brief": "takes advantage of the real signal symmetry property by passing two real",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "fft_dit_2ch_real_graph",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_DATA",
                        "description": "describes the type of individual data samples input to and output from the transform function."
                    },
                    {
                        "type": "typename",
                        "name": "TT_TWIDDLE",
                        "description": "describes the type of twiddle factors of the transform."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_POINT_SIZE",
                        "description": "is an unsigned integer which describes the number of samples in the transform."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_FFT_NIFFT",
                        "description": "selects whether the transform to perform is an FFT (1) or IFFT (0)."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SHIFT",
                        "description": "selects the power of 2 to scale the result by prior to output."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_CASC_LEN",
                        "description": "selects the number of kernels the FFT will be divided over in series to improve throughput"
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_WINDOW_VSIZE",
                        "description": "is an unsigned integer which describes the number of samples to be processed in each call"
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_API",
                        "description": "is an unsigned integer to select window (0) or stream (1) interfaces."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_RND",
                        "description": "describes the selection of rounding to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SAT",
                        "description": "describes the selection of saturation to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_TWIDDLE_MODE",
                        "description": "describes the magnitude of integer twiddles. It has no effect for cfloat."
                    },
                    {
                        "type": "typename",
                        "name": "TT_OUT_DATA",
                        "description": "describes the type of individual data samples output from the transform function."
                    }
                ],
                "header_file_name": [
                    "fft_dit_2ch_real_graph.hpp"
                ],
                "instance": "class",
                "api_name": "xf::dsp::aie::fft_dit_2ch_real::fft_dit_2ch_real_graph",
                "ports": [
                    {
                        "direction": "input",
                        "type": "port_array<input, 1> xf::dsp::aie::fft_dit_2ch_real::fft_dit_2ch_real_graph< TT_DATA, TT_TWIDDLE, TP_POINT_SIZE, TP_FFT_NIFFT, TP_SHIFT, TP_CASC_LEN, TP_WINDOW_VSIZE, TP_API, TP_RND, TP_SAT, TP_TWIDDLE_MODE, TT_OUT_DATA >::in",
                        "name": "in"
                    },
                    {
                        "direction": "output",
                        "type": "port_array<output, 1> xf::dsp::aie::fft_dit_2ch_real::fft_dit_2ch_real_graph< TT_DATA, TT_TWIDDLE, TP_POINT_SIZE, TP_FFT_NIFFT, TP_SHIFT, TP_CASC_LEN, TP_WINDOW_VSIZE, TP_API, TP_RND, TP_SAT, TP_TWIDDLE_MODE, TT_OUT_DATA >::out",
                        "name": "out"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::fir::decimate_asym::fir_decimate_asym_graph",
            "target_domain": "AIE",
            "spec": {
                "brief": "fir_decimate_asym is an Asymmetric Decimation FIR filter",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "fir_decimate_asym_graph",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_DATA",
                        "description": "describes the type of individual data samples input to and output from the filter function."
                    },
                    {
                        "type": "typename",
                        "name": "TT_COEFF",
                        "description": "describes the type of individual coefficients of the filter taps."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_FIR_LEN",
                        "description": "is an unsigned integer which describes the number of taps in the filter."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DECIMATE_FACTOR",
                        "description": "is an unsigned integer which describes the decimation factor of the filter, the ratio of input to output samples."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SHIFT",
                        "description": "describes power of 2 shift down applied to the accumulation of FIR terms before output."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_RND",
                        "description": "describes the selection of rounding to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_INPUT_WINDOW_VSIZE",
                        "description": "describes the number of samples processed by the graph in a single iteration run."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_CASC_LEN",
                        "description": "describes the number of AIE processors to split the operation over."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_USE_COEFF_RELOAD",
                        "description": "allows the user to select if runtime coefficient reloading should be used."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_NUM_OUTPUTS",
                        "description": "sets the number of ports over which the output is sent."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DUAL_IP",
                        "description": "allows 2 stream inputs to be connected to FIR, increasing available throughput."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_API",
                        "description": "specifies if the input/output interface should be window-based or stream-based."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SSR",
                        "description": "specifies the number of parallel input/output paths where samples are interleaved between paths, giving an overall higher throughput."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_PARA_DECI_POLY",
                        "description": "specifies the number of decimator polyphases that will be split up and executed in a series of pipelined cascade stages, resulting in additional input paths."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SAT",
                        "description": "describes the selection of saturation to be applied during the shift down stage of processing."
                    }
                ],
                "header_file_name": [
                    "fir_decimate_asym_graph.hpp"
                ],
                "instance": "class",
                "api_name": "xf::dsp::aie::fir::decimate_asym::fir_decimate_asym_graph",
                "ports": [
                    {
                        "direction": "input",
                        "type": "port_array<input, IN_SSR> xf::dsp::aie::fir::decimate_asym::fir_decimate_asym_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_DECIMATE_FACTOR, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_DUAL_IP, TP_API, TP_SSR, TP_PARA_DECI_POLY, TP_SAT >::in",
                        "name": "in"
                    },
                    {
                        "direction": "output",
                        "type": "port_array<output, TP_SSR> xf::dsp::aie::fir::decimate_asym::fir_decimate_asym_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_DECIMATE_FACTOR, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_DUAL_IP, TP_API, TP_SSR, TP_PARA_DECI_POLY, TP_SAT >::out",
                        "name": "out"
                    },
                    {
                        "direction": "input",
                        "type": "port_conditional_array<input, (TP_DUAL_IP == 1), IN_SSR> xf::dsp::aie::fir::decimate_asym::fir_decimate_asym_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_DECIMATE_FACTOR, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_DUAL_IP, TP_API, TP_SSR, TP_PARA_DECI_POLY, TP_SAT >::in2",
                        "name": "in2"
                    },
                    {
                        "direction": "input",
                        "type": "port_conditional_array<input, (TP_USE_COEFF_RELOAD == 1), TP_SSR> xf::dsp::aie::fir::decimate_asym::fir_decimate_asym_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_DECIMATE_FACTOR, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_DUAL_IP, TP_API, TP_SSR, TP_PARA_DECI_POLY, TP_SAT >::coeff",
                        "name": "coeff"
                    },
                    {
                        "direction": "output",
                        "type": "port_conditional_array<output, (TP_NUM_OUTPUTS == 2), TP_SSR> xf::dsp::aie::fir::decimate_asym::fir_decimate_asym_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_DECIMATE_FACTOR, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_DUAL_IP, TP_API, TP_SSR, TP_PARA_DECI_POLY, TP_SAT >::out2",
                        "name": "out2"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::fir::decimate_hb::fir_decimate_hb_graph",
            "target_domain": "AIE",
            "spec": {
                "brief": "fir_decimate_hb is a Halfband Decimation FIR filter",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "fir_decimate_hb_graph",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_DATA",
                        "description": "describes the type of individual data samples input to and output from the filter function."
                    },
                    {
                        "type": "typename",
                        "name": "TT_COEFF",
                        "description": "describes the type of individual coefficients of the filter taps."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_FIR_LEN",
                        "description": "is an unsigned integer which describes the number of taps in the filter."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SHIFT",
                        "description": "describes power of 2 shift down applied to the accumulation of FIR terms before output."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_RND",
                        "description": "describes the selection of rounding to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_INPUT_WINDOW_VSIZE",
                        "description": "describes the number of samples processed by the graph in a single iteration run."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_CASC_LEN",
                        "description": "describes the number of AIE processors to split the operation over."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DUAL_IP",
                        "description": "allows 2 input ports to be connected to FIR, increasing available throughput."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_USE_COEFF_RELOAD",
                        "description": "allows the user to select if runtime coefficient reloading should be used."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_NUM_OUTPUTS",
                        "description": "sets the number of ports over which the output is sent."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_API",
                        "description": "specifies if the input/output interface should be window-based or stream-based."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SSR",
                        "description": "specifies the number of parallel input/output paths where samples are interleaved between paths, giving an overall higher throughput."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_PARA_DECI_POLY",
                        "description": "specifies the number of distinct input data phases into which the input stream will be split. In each stream computations are performed in parallel and the outputs are combined into a single output stream."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SAT",
                        "description": "describes the selection of saturation to be applied during the shift down stage of processing."
                    }
                ],
                "header_file_name": [
                    "fir_decimate_hb_graph.hpp"
                ],
                "instance": "class",
                "api_name": "xf::dsp::aie::fir::decimate_hb::fir_decimate_hb_graph",
                "ports": [
                    {
                        "direction": "input",
                        "type": "port_array<input, TP_SSR * TP_PARA_DECI_POLY> xf::dsp::aie::fir::decimate_hb::fir_decimate_hb_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_DUAL_IP, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_API, TP_SSR, TP_PARA_DECI_POLY, TP_SAT >::in",
                        "name": "in"
                    },
                    {
                        "direction": "output",
                        "type": "port_array<output, TP_SSR> xf::dsp::aie::fir::decimate_hb::fir_decimate_hb_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_DUAL_IP, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_API, TP_SSR, TP_PARA_DECI_POLY, TP_SAT >::out",
                        "name": "out"
                    },
                    {
                        "direction": "input",
                        "type": "port_conditional_array<input, (TP_DUAL_IP == 1), TP_SSR * TP_PARA_DECI_POLY> xf::dsp::aie::fir::decimate_hb::fir_decimate_hb_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_DUAL_IP, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_API, TP_SSR, TP_PARA_DECI_POLY, TP_SAT >::in2",
                        "name": "in2"
                    },
                    {
                        "direction": "input",
                        "type": "port_conditional_array<input, (TP_USE_COEFF_RELOAD == 1), TP_SSR> xf::dsp::aie::fir::decimate_hb::fir_decimate_hb_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_DUAL_IP, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_API, TP_SSR, TP_PARA_DECI_POLY, TP_SAT >::coeff",
                        "name": "coeff"
                    },
                    {
                        "direction": "output",
                        "type": "port_conditional_array<output, (TP_NUM_OUTPUTS == 2), TP_SSR> xf::dsp::aie::fir::decimate_hb::fir_decimate_hb_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_DUAL_IP, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_API, TP_SSR, TP_PARA_DECI_POLY, TP_SAT >::out2",
                        "name": "out2"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::fir::decimate_sym::fir_decimate_sym_graph",
            "target_domain": "AIE",
            "spec": {
                "brief": "fir_decimate_sym is a Symmetrical Decimation FIR filter",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "fir_decimate_sym_graph",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_DATA",
                        "description": "describes the type of individual data samples input to and output from the filter function."
                    },
                    {
                        "type": "typename",
                        "name": "TT_COEFF",
                        "description": "describes the type of individual coefficients of the filter taps."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_FIR_LEN",
                        "description": "is an unsigned integer which describes the number of taps in the filter."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DECIMATE_FACTOR",
                        "description": "is an unsigned integer which describes the decimation factor of the filter, the ratio of input to output samples."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SHIFT",
                        "description": "describes power of 2 shift down applied to the accumulation of FIR terms before output."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_RND",
                        "description": "describes the selection of rounding to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_INPUT_WINDOW_VSIZE",
                        "description": "describes the number of samples processed by the graph in a single iteration run."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_CASC_LEN",
                        "description": "describes the number of AIE processors to split the operation over."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DUAL_IP",
                        "description": "allows 2 input ports to be connected to FIR, increasing available throughput."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_USE_COEFF_RELOAD",
                        "description": "allows the user to select if runtime coefficient reloading should be used."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_NUM_OUTPUTS",
                        "description": "sets the number of ports over which the output is sent."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_API",
                        "description": "specifies if the input/output interface should be window-based or stream-based."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SSR",
                        "description": "specifies the number of parallel input/output paths where samples are interleaved between paths, giving an overall higher throughput."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SAT",
                        "description": "describes the selection of saturation to be applied during the shift down stage of processing. TP_SAT accepts unsigned integer values, where:"
                    }
                ],
                "header_file_name": [
                    "fir_decimate_sym_graph.hpp"
                ],
                "instance": "class",
                "api_name": "xf::dsp::aie::fir::decimate_sym::fir_decimate_sym_graph",
                "ports": [
                    {
                        "direction": "input",
                        "type": "port_array<input, TP_SSR> xf::dsp::aie::fir::decimate_sym::fir_decimate_sym_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_DECIMATE_FACTOR, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_DUAL_IP, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_API, TP_SSR, TP_SAT >::in",
                        "name": "in"
                    },
                    {
                        "direction": "output",
                        "type": "port_array<output, TP_SSR> xf::dsp::aie::fir::decimate_sym::fir_decimate_sym_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_DECIMATE_FACTOR, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_DUAL_IP, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_API, TP_SSR, TP_SAT >::out",
                        "name": "out"
                    },
                    {
                        "direction": "input",
                        "type": "port_conditional_array<input, (TP_DUAL_IP == 1), TP_SSR> xf::dsp::aie::fir::decimate_sym::fir_decimate_sym_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_DECIMATE_FACTOR, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_DUAL_IP, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_API, TP_SSR, TP_SAT >::in2",
                        "name": "in2"
                    },
                    {
                        "direction": "input",
                        "type": "port_conditional_array<input, (TP_USE_COEFF_RELOAD == 1), TP_SSR> xf::dsp::aie::fir::decimate_sym::fir_decimate_sym_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_DECIMATE_FACTOR, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_DUAL_IP, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_API, TP_SSR, TP_SAT >::coeff",
                        "name": "coeff"
                    },
                    {
                        "direction": "output",
                        "type": "port_conditional_array<output, (TP_NUM_OUTPUTS == 2), TP_SSR> xf::dsp::aie::fir::decimate_sym::fir_decimate_sym_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_DECIMATE_FACTOR, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_DUAL_IP, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_API, TP_SSR, TP_SAT >::out2",
                        "name": "out2"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::fir::interpolate_asym::fir_interpolate_asym_graph",
            "target_domain": "AIE",
            "spec": {
                "brief": "fir_interpolate_asym is an Asymmetric Interpolation FIR filter",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "fir_interpolate_asym_graph",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_DATA",
                        "description": "describes the type of individual data samples input to and output from the filter function."
                    },
                    {
                        "type": "typename",
                        "name": "TT_COEFF",
                        "description": "describes the type of individual coefficients of the filter taps."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_FIR_LEN",
                        "description": "is an unsigned integer which describes the number of taps in the filter."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_INTERPOLATE_FACTOR",
                        "description": "is an unsigned integer which describes the interpolation factor of the filter."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SHIFT",
                        "description": "describes power of 2 shift down applied to the accumulation of FIR terms before output."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_RND",
                        "description": "describes the selection of rounding to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_INPUT_WINDOW_VSIZE",
                        "description": "describes the number of samples processed by the graph in a single iteration run."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_CASC_LEN",
                        "description": "describes the number of AIE processors to split the operation over."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_USE_COEFF_RELOAD",
                        "description": "allows the user to select if runtime coefficient reloading should be used."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DUAL_IP",
                        "description": "allows 2 stream inputs to be connected to FIR, increasing available throughput."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_NUM_OUTPUTS",
                        "description": "sets the number of ports over which the output is sent."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_API",
                        "description": "specifies if the input/output interface should be window-based or stream-based."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SSR",
                        "description": "specifies the number of parallel input paths where samples are interleaved between paths, giving an overall higher throughput."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_PARA_INTERP_POLY",
                        "description": "sets the number of interpolator polyphases over which the coefficients will be split to enable parallel computation of the outputs."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SAT",
                        "description": "describes the selection of saturation to be applied during the shift down stage of processing."
                    }
                ],
                "header_file_name": [
                    "fir_interpolate_asym_graph.hpp"
                ],
                "instance": "class",
                "api_name": "xf::dsp::aie::fir::interpolate_asym::fir_interpolate_asym_graph",
                "ports": [
                    {
                        "direction": "input",
                        "type": "port_array<input, TP_SSR> xf::dsp::aie::fir::interpolate_asym::fir_interpolate_asym_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_INTERPOLATE_FACTOR, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_USE_COEFF_RELOAD, TP_DUAL_IP, TP_NUM_OUTPUTS, TP_API, TP_SSR, TP_PARA_INTERP_POLY, TP_SAT >::in",
                        "name": "in"
                    },
                    {
                        "direction": "output",
                        "type": "port_array<output, OUT_SSR> xf::dsp::aie::fir::interpolate_asym::fir_interpolate_asym_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_INTERPOLATE_FACTOR, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_USE_COEFF_RELOAD, TP_DUAL_IP, TP_NUM_OUTPUTS, TP_API, TP_SSR, TP_PARA_INTERP_POLY, TP_SAT >::out",
                        "name": "out"
                    },
                    {
                        "direction": "input",
                        "type": "port_conditional_array<input, (TP_DUAL_IP == 1), TP_SSR> xf::dsp::aie::fir::interpolate_asym::fir_interpolate_asym_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_INTERPOLATE_FACTOR, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_USE_COEFF_RELOAD, TP_DUAL_IP, TP_NUM_OUTPUTS, TP_API, TP_SSR, TP_PARA_INTERP_POLY, TP_SAT >::in2",
                        "name": "in2"
                    },
                    {
                        "direction": "input",
                        "type": "port_conditional_array<input, (TP_USE_COEFF_RELOAD == 1), TP_SSR * TP_PARA_INTERP_POLY> xf::dsp::aie::fir::interpolate_asym::fir_interpolate_asym_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_INTERPOLATE_FACTOR, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_USE_COEFF_RELOAD, TP_DUAL_IP, TP_NUM_OUTPUTS, TP_API, TP_SSR, TP_PARA_INTERP_POLY, TP_SAT >::coeff",
                        "name": "coeff"
                    },
                    {
                        "direction": "output",
                        "type": "port_conditional_array<output, (TP_NUM_OUTPUTS == 2), OUT_SSR> xf::dsp::aie::fir::interpolate_asym::fir_interpolate_asym_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_INTERPOLATE_FACTOR, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_USE_COEFF_RELOAD, TP_DUAL_IP, TP_NUM_OUTPUTS, TP_API, TP_SSR, TP_PARA_INTERP_POLY, TP_SAT >::out2",
                        "name": "out2"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::fir::interpolate_fract_asym::fir_interpolate_fract_asym_graph",
            "target_domain": "AIE",
            "spec": {
                "brief": "fir_resampler is an Asymmetric Fractional Interpolation FIR filter",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "fir_interpolate_fract_asym_graph",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_DATA",
                        "description": "describes the type of individual data samples input to and output from the filter function."
                    },
                    {
                        "type": "typename",
                        "name": "TT_COEFF",
                        "description": "describes the type of individual coefficients of the filter taps."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_FIR_LEN",
                        "description": "is an unsigned integer which describes the number of taps in the filter."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_INTERPOLATE_FACTOR",
                        "description": "is an unsigned integer which describes the interpolation factor of the filter."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DECIMATE_FACTOR",
                        "description": "is an unsigned integer which describes the decimation factor of the filter. TP_DECIMATE_FACTOR must be in the range 2 to 16. The decimation factor should be less that the interpolation factor and should not be divisible factor of the interpolation factor."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SHIFT",
                        "description": "describes power of 2 shift down applied to the accumulation of FIR terms before output."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_RND",
                        "description": "describes the selection of rounding to be applied during the shift down stage of processing. TP_RND must be in the range 0 to 7 where"
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_INPUT_WINDOW_VSIZE",
                        "description": "describes the number of samples in the window API used for input to the filter function."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_CASC_LEN",
                        "description": "describes the number of AIE processors to split the operation over."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_USE_COEFF_RELOAD",
                        "description": "allows the user to select if runtime coefficient reloading should be used."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_NUM_OUTPUTS",
                        "description": "sets the number of ports to broadcast the output to."
                    }
                ],
                "header_file_name": [
                    "fir_interpolate_fract_asym_graph.hpp"
                ],
                "instance": "class",
                "api_name": "xf::dsp::aie::fir::interpolate_fract_asym::fir_interpolate_fract_asym_graph",
                "ports": [
                    {
                        "direction": "input",
                        "type": "port<input> xf::dsp::aie::fir::interpolate_fract_asym::fir_interpolate_fract_asym_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_INTERPOLATE_FACTOR, TP_DECIMATE_FACTOR, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS >::in",
                        "name": "in"
                    },
                    {
                        "direction": "output",
                        "type": "port<output> xf::dsp::aie::fir::interpolate_fract_asym::fir_interpolate_fract_asym_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_INTERPOLATE_FACTOR, TP_DECIMATE_FACTOR, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS >::out",
                        "name": "out"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::fir::interpolate_hb::fir_interpolate_hb_graph",
            "target_domain": "AIE",
            "spec": {
                "brief": "fir_interpolate_hb is a Halfband Interpolation FIR filter",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "fir_interpolate_hb_graph",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_DATA",
                        "description": "describes the type of individual data samples input to and output from the filter function."
                    },
                    {
                        "type": "typename",
                        "name": "TT_COEFF",
                        "description": "describes the type of individual coefficients of the filter taps."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_FIR_LEN",
                        "description": "is an unsigned integer which describes the number of taps in the filter."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SHIFT",
                        "description": "describes power of 2 shift down applied to the accumulation of FIR terms before output."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_RND",
                        "description": "describes the selection of rounding to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_INPUT_WINDOW_VSIZE",
                        "description": "describes the number of samples processed by the graph in a single iteration run."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_CASC_LEN",
                        "description": "describes the number of AIE processors to split the operation over."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DUAL_IP",
                        "description": "allows 2 input ports to be connected to FIR, increasing available throughput."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_USE_COEFF_RELOAD",
                        "description": "allows the user to select if runtime coefficient reloading should be used."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_NUM_OUTPUTS",
                        "description": "sets the number of ports over which the output is sent."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_UPSHIFT_CT",
                        "description": "upshift unit center tap."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_API",
                        "description": "specifies if the input/output interface should be window-based or stream-based."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SSR",
                        "description": "specifies the number of parallel input/output paths where samples are interleaved between paths, giving an overall higher throughput."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_PARA_INTERP_POLY",
                        "description": "sets the number of interpolator polyphases over which the coefficients will be split to enable parallel computation of the outputs. The polyphases are executed in parallel, output data is produced by each polyphase directly."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SAT",
                        "description": "describes the selection of saturation to be applied during the shift down stage of processing."
                    }
                ],
                "header_file_name": [
                    "fir_interpolate_hb_graph.hpp"
                ],
                "instance": "class",
                "api_name": "xf::dsp::aie::fir::interpolate_hb::fir_interpolate_hb_graph",
                "ports": [
                    {
                        "direction": "input",
                        "type": "port_array<input, TP_SSR> xf::dsp::aie::fir::interpolate_hb::fir_interpolate_hb_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_DUAL_IP, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_UPSHIFT_CT, TP_API, TP_SSR, TP_PARA_INTERP_POLY, TP_SAT >::in",
                        "name": "in"
                    },
                    {
                        "direction": "output",
                        "type": "port_array<output, TP_SSR> xf::dsp::aie::fir::interpolate_hb::fir_interpolate_hb_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_DUAL_IP, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_UPSHIFT_CT, TP_API, TP_SSR, TP_PARA_INTERP_POLY, TP_SAT >::out",
                        "name": "out"
                    },
                    {
                        "direction": "input",
                        "type": "port_conditional_array<input, (TP_DUAL_IP == 1), TP_SSR> xf::dsp::aie::fir::interpolate_hb::fir_interpolate_hb_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_DUAL_IP, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_UPSHIFT_CT, TP_API, TP_SSR, TP_PARA_INTERP_POLY, TP_SAT >::in2",
                        "name": "in2"
                    },
                    {
                        "direction": "input",
                        "type": "port_conditional_array<input, (TP_USE_COEFF_RELOAD == 1), TP_SSR> xf::dsp::aie::fir::interpolate_hb::fir_interpolate_hb_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_DUAL_IP, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_UPSHIFT_CT, TP_API, TP_SSR, TP_PARA_INTERP_POLY, TP_SAT >::coeff",
                        "name": "coeff"
                    },
                    {
                        "direction": "input",
                        "type": "port_conditional_array<input, (TP_USE_COEFF_RELOAD == 1), TP_SSR> xf::dsp::aie::fir::interpolate_hb::fir_interpolate_hb_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_DUAL_IP, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_UPSHIFT_CT, TP_API, TP_SSR, TP_PARA_INTERP_POLY, TP_SAT >::coeffCT",
                        "name": "coeffCT"
                    },
                    {
                        "direction": "output",
                        "type": "port_conditional_array<output, (TP_NUM_OUTPUTS == 2), TP_SSR> xf::dsp::aie::fir::interpolate_hb::fir_interpolate_hb_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_DUAL_IP, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_UPSHIFT_CT, TP_API, TP_SSR, TP_PARA_INTERP_POLY, TP_SAT >::out2",
                        "name": "out2"
                    },
                    {
                        "direction": "output",
                        "type": "port_conditional_array<output, (TP_PARA_INTERP_POLY > 1), TP_SSR> xf::dsp::aie::fir::interpolate_hb::fir_interpolate_hb_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_DUAL_IP, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_UPSHIFT_CT, TP_API, TP_SSR, TP_PARA_INTERP_POLY, TP_SAT >::out3",
                        "name": "out3"
                    },
                    {
                        "direction": "output",
                        "type": "port_conditional_array<output, (TP_PARA_INTERP_POLY > 1 && TP_NUM_OUTPUTS == 2), TP_SSR> xf::dsp::aie::fir::interpolate_hb::fir_interpolate_hb_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_DUAL_IP, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_UPSHIFT_CT, TP_API, TP_SSR, TP_PARA_INTERP_POLY, TP_SAT >::out4",
                        "name": "out4"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::fir::resampler::fir_resampler_graph",
            "target_domain": "AIE",
            "spec": {
                "brief": "fir_resampler is a generic asymmetric FIR filter that can do fractional and integer interpolation and decimation.",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "fir_resampler_graph",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_DATA",
                        "description": "describes the type of individual data samples input to and output from the filter function."
                    },
                    {
                        "type": "typename",
                        "name": "TT_COEFF",
                        "description": "describes the type of individual coefficients of the filter taps."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_FIR_LEN",
                        "description": "is an unsigned integer which describes the number of taps in the filter."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_INTERPOLATE_FACTOR",
                        "description": "is an unsigned integer which describes the interpolation factor of the filter."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DECIMATE_FACTOR",
                        "description": "is an unsigned integer which describes the decimation factor of the filter. TP_DECIMATE_FACTOR must be in the range 2 to 16."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SHIFT",
                        "description": "describes power of 2 shift down applied to the accumulation of FIR terms before output."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_RND",
                        "description": "describes the selection of rounding to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_INPUT_WINDOW_VSIZE",
                        "description": "describes the number of samples processed by the graph in a single iteration run."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_CASC_LEN",
                        "description": "describes the number of AIE processors to split the operation over."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_USE_COEFF_RELOAD",
                        "description": "allows the user to select if runtime coefficient reloading should be used."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_NUM_OUTPUTS",
                        "description": "sets the number of ports over which the output is sent."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DUAL_IP",
                        "description": "allows 2 stream inputs to be connected to FIR, increasing available throughput."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_API",
                        "description": "specifies if the input/output interface should be window-based or stream-based."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SSR",
                        "description": "specifies the number of parallel input paths where samples are interleaved between paths, giving an overall higher throughput."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_PARA_INTERP_POLY",
                        "description": "sets the number of interpolator polyphases over which the coefficients will be split to enable parallel computation of the outputs."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_PARA_DECI_POLY",
                        "description": "specifies the number of decimator polyphases that will be split up and executed in a series of pipelined cascade stages, resulting in additional input paths."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SAT",
                        "description": "describes the selection of saturation to be applied during the shift down stage of processing."
                    }
                ],
                "header_file_name": [
                    "fir_resampler_graph.hpp"
                ],
                "instance": "class",
                "api_name": "xf::dsp::aie::fir::resampler::fir_resampler_graph",
                "ports": [
                    {
                        "direction": "input",
                        "type": "port_array<input, IN_SSR> xf::dsp::aie::fir::resampler::fir_resampler_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_INTERPOLATE_FACTOR, TP_DECIMATE_FACTOR, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_DUAL_IP, TP_API, TP_SSR, TP_PARA_INTERP_POLY, TP_PARA_DECI_POLY, TP_SAT >::in",
                        "name": "in"
                    },
                    {
                        "direction": "output",
                        "type": "port_array<output, OUT_SSR> xf::dsp::aie::fir::resampler::fir_resampler_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_INTERPOLATE_FACTOR, TP_DECIMATE_FACTOR, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_DUAL_IP, TP_API, TP_SSR, TP_PARA_INTERP_POLY, TP_PARA_DECI_POLY, TP_SAT >::out",
                        "name": "out"
                    },
                    {
                        "direction": "input",
                        "type": "port_conditional_array<input, (TP_DUAL_IP == 1), IN_SSR> xf::dsp::aie::fir::resampler::fir_resampler_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_INTERPOLATE_FACTOR, TP_DECIMATE_FACTOR, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_DUAL_IP, TP_API, TP_SSR, TP_PARA_INTERP_POLY, TP_PARA_DECI_POLY, TP_SAT >::in2",
                        "name": "in2"
                    },
                    {
                        "direction": "input",
                        "type": "port_conditional_array<input, (TP_USE_COEFF_RELOAD == 1), TP_SSR * TP_PARA_INTERP_POLY> xf::dsp::aie::fir::resampler::fir_resampler_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_INTERPOLATE_FACTOR, TP_DECIMATE_FACTOR, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_DUAL_IP, TP_API, TP_SSR, TP_PARA_INTERP_POLY, TP_PARA_DECI_POLY, TP_SAT >::coeff",
                        "name": "coeff"
                    },
                    {
                        "direction": "output",
                        "type": "port_conditional_array<output, (TP_NUM_OUTPUTS == 2), OUT_SSR> xf::dsp::aie::fir::resampler::fir_resampler_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_INTERPOLATE_FACTOR, TP_DECIMATE_FACTOR, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_DUAL_IP, TP_API, TP_SSR, TP_PARA_INTERP_POLY, TP_PARA_DECI_POLY, TP_SAT >::out2",
                        "name": "out2"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::fir::sr_asym::fir_sr_asym_graph",
            "target_domain": "AIE",
            "spec": {
                "brief": "fir_sr_asym is a Asymmetric Single Rate FIR filter",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "fir_sr_asym_graph",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_DATA",
                        "description": "describes the type of individual data samples input to and output from the filter function."
                    },
                    {
                        "type": "typename",
                        "name": "TT_COEFF",
                        "description": "describes the type of individual coefficients of the filter taps."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_FIR_LEN",
                        "description": "is an unsigned integer which describes the number of taps in the filter."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SHIFT",
                        "description": "describes power of 2 shift down applied to the accumulation of FIR terms before output."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_RND",
                        "description": "describes the selection of rounding to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_INPUT_WINDOW_VSIZE",
                        "description": "describes the number of samples processed by the graph in a single iteration run."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_CASC_LEN",
                        "description": "describes the number of AIE processors to split the operation over."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_USE_COEFF_RELOAD",
                        "description": "allows the user to select if runtime coefficient reloading should be used."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_NUM_OUTPUTS",
                        "description": "sets the number of ports to broadcast the output to."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DUAL_IP",
                        "description": "allows 2 stream inputs to be connected to FIR, increasing available throughput."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_API",
                        "description": "specifies if the input/output interface should be window-based or stream-based."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SSR",
                        "description": "specifies the number of parallel input/output paths where samples are interleaved between paths, giving an overall higher throughput."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SAT",
                        "description": "describes the selection of saturation to be applied during the shift down stage of processing."
                    }
                ],
                "header_file_name": [
                    "fir_sr_asym_graph.hpp"
                ],
                "instance": "class",
                "api_name": "xf::dsp::aie::fir::sr_asym::fir_sr_asym_graph",
                "ports": [
                    {
                        "direction": "input",
                        "type": "port_array<input, TP_SSR> xf::dsp::aie::fir::sr_asym::fir_sr_asym_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_DUAL_IP, TP_API, TP_SSR, TP_SAT >::in",
                        "name": "in"
                    },
                    {
                        "direction": "output",
                        "type": "port_array<output, TP_SSR> xf::dsp::aie::fir::sr_asym::fir_sr_asym_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_DUAL_IP, TP_API, TP_SSR, TP_SAT >::out",
                        "name": "out"
                    },
                    {
                        "direction": "input",
                        "type": "port_conditional_array<input, (TP_DUAL_IP == 1), TP_SSR> xf::dsp::aie::fir::sr_asym::fir_sr_asym_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_DUAL_IP, TP_API, TP_SSR, TP_SAT >::in2",
                        "name": "in2"
                    },
                    {
                        "direction": "input",
                        "type": "port_conditional_array<input, (TP_USE_COEFF_RELOAD == 1), TP_SSR> xf::dsp::aie::fir::sr_asym::fir_sr_asym_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_DUAL_IP, TP_API, TP_SSR, TP_SAT >::coeff",
                        "name": "coeff"
                    },
                    {
                        "direction": "output",
                        "type": "port_conditional_array<output, (TP_NUM_OUTPUTS == 2), TP_SSR> xf::dsp::aie::fir::sr_asym::fir_sr_asym_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_DUAL_IP, TP_API, TP_SSR, TP_SAT >::out2",
                        "name": "out2"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::fir::sr_sym::fir_sr_sym_graph",
            "target_domain": "AIE",
            "spec": {
                "brief": "fir_sr_sym is a Symmetrical Single Rate FIR filter",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "fir_sr_sym_graph",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_DATA",
                        "description": "describes the type of individual data samples input to and output from the filter function."
                    },
                    {
                        "type": "typename",
                        "name": "TT_COEFF",
                        "description": "describes the type of individual coefficients of the filter taps."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_FIR_LEN",
                        "description": "is an unsigned integer which describes the number of taps in the filter."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SHIFT",
                        "description": "describes power of 2 shift down applied to the accumulation of FIR terms before output."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_RND",
                        "description": "describes the selection of rounding to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_INPUT_WINDOW_VSIZE",
                        "description": "describes the number of samples processed by the graph in a single iteration run."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_CASC_LEN",
                        "description": "describes the number of AIE processors to split the operation over."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DUAL_IP",
                        "description": "allows 2 input ports to be connected to FIR, increasing available throughput."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_USE_COEFF_RELOAD",
                        "description": "allows the user to select if runtime coefficient reloading should be used."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_NUM_OUTPUTS",
                        "description": "sets the number of ports over which the output is sent."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_API",
                        "description": "specifies if the output interface should be window-based or stream-based."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SSR",
                        "description": "specifies the number of parallel input/output paths where samples are interleaved between paths, giving an overall higher throughput."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SAT",
                        "description": "describes the selection of saturation to be applied during the shift down stage of processing."
                    }
                ],
                "header_file_name": [
                    "fir_sr_sym_graph.hpp"
                ],
                "instance": "class",
                "api_name": "xf::dsp::aie::fir::sr_sym::fir_sr_sym_graph",
                "ports": [
                    {
                        "direction": "input",
                        "type": "port_array<input, TP_SSR> xf::dsp::aie::fir::sr_sym::fir_sr_sym_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_DUAL_IP, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_API, TP_SSR, TP_SAT >::in",
                        "name": "in"
                    },
                    {
                        "direction": "output",
                        "type": "port_array<output, TP_SSR> xf::dsp::aie::fir::sr_sym::fir_sr_sym_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_DUAL_IP, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_API, TP_SSR, TP_SAT >::out",
                        "name": "out"
                    },
                    {
                        "direction": "input",
                        "type": "port_conditional_array<input, (TP_DUAL_IP == 1), TP_SSR> xf::dsp::aie::fir::sr_sym::fir_sr_sym_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_DUAL_IP, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_API, TP_SSR, TP_SAT >::in2",
                        "name": "in2"
                    },
                    {
                        "direction": "input",
                        "type": "port_conditional_array<input, (TP_USE_COEFF_RELOAD == 1), TP_SSR> xf::dsp::aie::fir::sr_sym::fir_sr_sym_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_DUAL_IP, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_API, TP_SSR, TP_SAT >::coeff",
                        "name": "coeff"
                    },
                    {
                        "direction": "output",
                        "type": "port_conditional_array<output, (TP_NUM_OUTPUTS == 2), TP_SSR> xf::dsp::aie::fir::sr_sym::fir_sr_sym_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_CASC_LEN, TP_DUAL_IP, TP_USE_COEFF_RELOAD, TP_NUM_OUTPUTS, TP_API, TP_SSR, TP_SAT >::out2",
                        "name": "out2"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::fir::tdm::fir_tdm_graph",
            "target_domain": "AIE",
            "spec": {
                "brief": "fir_tdm is a Time-Division Multiplexing (TDM) FIR filter",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "fir_tdm_graph",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_DATA",
                        "description": "describes the type of individual data samples input to the filter function."
                    },
                    {
                        "type": "typename",
                        "name": "TT_COEFF",
                        "description": "describes the type of individual coefficients of the filter taps."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_FIR_LEN",
                        "description": "is an unsigned integer which describes the number of taps in the filter."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SHIFT",
                        "description": "describes power of 2 shift down applied to the accumulation of FIR terms before output."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_RND",
                        "description": "describes the selection of rounding to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_INPUT_WINDOW_VSIZE",
                        "description": "describes the number of samples processed by the graph in a single iteration run."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_TDM_CHANNELS",
                        "description": "describes the number of TDM Channels processed by the FIR."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_NUM_OUTPUTS",
                        "description": "sets the number of ports to broadcast the output to."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DUAL_IP",
                        "description": "allows 2 stream inputs to be connected to FIR, increasing available throughput."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SSR",
                        "description": "specifies the number of parallel input/output paths where samples are interleaved between paths, giving an overall higher throughput."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SAT",
                        "description": "describes the selection of saturation to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_CASC_LEN",
                        "description": "describes the number of AIE processors to split the operation over."
                    },
                    {
                        "type": "typename",
                        "name": "TT_OUT_DATA",
                        "description": "describes the type of output data samples from the filter function."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_USE_COEFF_RELOAD",
                        "description": "allows the user to select if runtime coefficient reloading should be used."
                    }
                ],
                "header_file_name": [
                    "fir_tdm_graph.hpp"
                ],
                "instance": "class",
                "api_name": "xf::dsp::aie::fir::tdm::fir_tdm_graph",
                "ports": [
                    {
                        "direction": "input",
                        "type": "port_array<input, TP_SSR> xf::dsp::aie::fir::tdm::fir_tdm_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_TDM_CHANNELS, TP_NUM_OUTPUTS, TP_DUAL_IP, TP_SSR, TP_SAT, TP_CASC_LEN, TT_OUT_DATA, TP_USE_COEFF_RELOAD >::in",
                        "name": "in"
                    },
                    {
                        "direction": "output",
                        "type": "port_array<output, TP_SSR> xf::dsp::aie::fir::tdm::fir_tdm_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_TDM_CHANNELS, TP_NUM_OUTPUTS, TP_DUAL_IP, TP_SSR, TP_SAT, TP_CASC_LEN, TT_OUT_DATA, TP_USE_COEFF_RELOAD >::out",
                        "name": "out"
                    },
                    {
                        "direction": "input",
                        "type": "port_conditional_array<input, (TP_USE_COEFF_RELOAD == 1), (TP_SSR * TP_CASC_LEN)> xf::dsp::aie::fir::tdm::fir_tdm_graph< TT_DATA, TT_COEFF, TP_FIR_LEN, TP_SHIFT, TP_RND, TP_INPUT_WINDOW_VSIZE, TP_TDM_CHANNELS, TP_NUM_OUTPUTS, TP_DUAL_IP, TP_SSR, TP_SAT, TP_CASC_LEN, TT_OUT_DATA, TP_USE_COEFF_RELOAD >::coeff",
                        "name": "coeff"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::hadamard::hadamard_graph",
            "target_domain": "AIE",
            "spec": {
                "brief": "Hadamard product is element-wise multiplication of two vectors of same size.",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "hadamard_graph",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_DATA_A",
                        "description": "describes the type of individual data samples input to the function."
                    },
                    {
                        "type": "typename",
                        "name": "TT_DATA_B",
                        "description": "describes the type of individual data samples input to the function."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DIM",
                        "description": "describes the number of samples in the vectors A and B."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_NUM_FRAMES",
                        "description": "describes the number of vectors to be processed in each call to this function."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SHIFT",
                        "description": "describes power of 2 shift down applied to the accumulation of product terms before each output."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_API",
                        "description": "described whether to use streams (1) or windows (0)."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SSR",
                        "description": "describes the number of kernels to use in parallel."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_RND",
                        "description": "describes the selection of rounding to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SAT",
                        "description": "describes the selection of saturation to be applied during the shift down stage of processing."
                    }
                ],
                "header_file_name": [
                    "hadamard_graph.hpp"
                ],
                "instance": "class",
                "api_name": "xf::dsp::aie::hadamard::hadamard_graph",
                "ports": [
                    {
                        "direction": "input",
                        "type": "port_array<input, TP_SSR> xf::dsp::aie::hadamard::hadamard_graph< TT_DATA_A, TT_DATA_B, TP_DIM, TP_NUM_FRAMES, TP_SHIFT, TP_API, TP_SSR, TP_RND, TP_SAT >::inA",
                        "name": "inA"
                    },
                    {
                        "direction": "input",
                        "type": "port_array<input, TP_SSR> xf::dsp::aie::hadamard::hadamard_graph< TT_DATA_A, TT_DATA_B, TP_DIM, TP_NUM_FRAMES, TP_SHIFT, TP_API, TP_SSR, TP_RND, TP_SAT >::inB",
                        "name": "inB"
                    },
                    {
                        "direction": "output",
                        "type": "port_array<output, TP_SSR> xf::dsp::aie::hadamard::hadamard_graph< TT_DATA_A, TT_DATA_B, TP_DIM, TP_NUM_FRAMES, TP_SHIFT, TP_API, TP_SSR, TP_RND, TP_SAT >::out",
                        "name": "out"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::kronecker::kronecker_graph",
            "target_domain": "AIE",
            "spec": {
                "brief": "Kronecker calculates Kronecker Matrix Product of the two matrices.",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "kronecker_graph",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_DATA_A",
                        "description": "describes the data type of input A to the function."
                    },
                    {
                        "type": "typename",
                        "name": "TT_DATA_B",
                        "description": "describes the data type of input B to the function."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DIM_A_ROWS",
                        "description": "describes number of rows of input Matrix A."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DIM_A_COLS",
                        "description": "describes number of columns of input Matrix A."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DIM_B_ROWS",
                        "description": "describes number of rows of input Matrix B."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DIM_B_COLS",
                        "description": "describes number of columns of input Matrix B."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_NUM_FRAMES",
                        "description": "describes number of input data frames to be processed per call to the function."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_API",
                        "description": "describes whether to use streams (1) or windows (0) on output."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SHIFT",
                        "description": "described the number of bits to downshift each sample prior to output."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SSR",
                        "description": "describes the number of kernels to use in parallel."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_RND",
                        "description": "describes the selection of rounding to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SAT",
                        "description": "describes the selection of saturation to be applied during the shift down stage of processing."
                    }
                ],
                "header_file_name": [
                    "kronecker_graph.hpp"
                ],
                "instance": "class",
                "api_name": "xf::dsp::aie::kronecker::kronecker_graph",
                "ports": [
                    {
                        "direction": "input",
                        "type": "port_array<input, TP_SSR> xf::dsp::aie::kronecker::kronecker_graph< TT_DATA_A, TT_DATA_B, TP_DIM_A_ROWS, TP_DIM_A_COLS, TP_DIM_B_ROWS, TP_DIM_B_COLS, TP_NUM_FRAMES, TP_API, TP_SHIFT, TP_SSR, TP_RND, TP_SAT >::inA",
                        "name": "inA"
                    },
                    {
                        "direction": "input",
                        "type": "port_array<input, TP_SSR> xf::dsp::aie::kronecker::kronecker_graph< TT_DATA_A, TT_DATA_B, TP_DIM_A_ROWS, TP_DIM_A_COLS, TP_DIM_B_ROWS, TP_DIM_B_COLS, TP_NUM_FRAMES, TP_API, TP_SHIFT, TP_SSR, TP_RND, TP_SAT >::inB",
                        "name": "inB"
                    },
                    {
                        "direction": "output",
                        "type": "port_array<output, TP_SSR> xf::dsp::aie::kronecker::kronecker_graph< TT_DATA_A, TT_DATA_B, TP_DIM_A_ROWS, TP_DIM_A_COLS, TP_DIM_B_ROWS, TP_DIM_B_COLS, TP_NUM_FRAMES, TP_API, TP_SHIFT, TP_SSR, TP_RND, TP_SAT >::out",
                        "name": "out"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::outer_tensor::outer_tensor_graph",
            "target_domain": "AIE",
            "spec": {
                "brief": "is every element-wise combination of two vectors.",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "outer_tensor_graph",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_DATA_A",
                        "description": "describes the type of individual data samples input to the function."
                    },
                    {
                        "type": "typename",
                        "name": "TT_DATA_B",
                        "description": "describes the type of individual data samples input to the function."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DIM_A",
                        "description": "describes the number of samples in the vector A."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_DIM_B",
                        "description": "describes the number of samples in the vector B."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_NUM_FRAMES",
                        "description": "describes the number of outer tensor product operations to perform per call to the kernel."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SHIFT",
                        "description": "describes the number of bits to downshift."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_API",
                        "description": "describes whether to use streams (1) or windows (0)."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SSR",
                        "description": "describes the number of kernels to use in parallel to perform the windowing function."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_RND",
                        "description": "describes the selection of rounding to be applied during the shift down stage of processing."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_SAT",
                        "description": "describes the selection of saturation to be applied during the shift down stage of processing."
                    }
                ],
                "header_file_name": [
                    "outer_tensor_graph.hpp"
                ],
                "instance": "class",
                "api_name": "xf::dsp::aie::outer_tensor::outer_tensor_graph",
                "ports": [
                    {
                        "direction": "input",
                        "type": "port_array<input, TP_SSR> xf::dsp::aie::outer_tensor::outer_tensor_graph< TT_DATA_A, TT_DATA_B, TP_DIM_A, TP_DIM_B, TP_NUM_FRAMES, TP_SHIFT, TP_API, TP_SSR, TP_RND, TP_SAT >::inA",
                        "name": "inA"
                    },
                    {
                        "direction": "input",
                        "type": "port_array<input, TP_SSR> xf::dsp::aie::outer_tensor::outer_tensor_graph< TT_DATA_A, TT_DATA_B, TP_DIM_A, TP_DIM_B, TP_NUM_FRAMES, TP_SHIFT, TP_API, TP_SSR, TP_RND, TP_SAT >::inB",
                        "name": "inB"
                    },
                    {
                        "direction": "output",
                        "type": "port_array<output, TP_SSR> xf::dsp::aie::outer_tensor::outer_tensor_graph< TT_DATA_A, TT_DATA_B, TP_DIM_A, TP_DIM_B, TP_NUM_FRAMES, TP_SHIFT, TP_API, TP_SSR, TP_RND, TP_SAT >::out",
                        "name": "out"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::sample_delay::sample_delay_graph",
            "target_domain": "AIE",
            "spec": {
                "brief": "introduces delay to the input data. The numSampledelay is a Run Time Parameter (RTP) for setting the value of delay.",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "sample_delay_graph",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_DATA",
                        "description": "describes the type of individual data samples input to the function."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_WINDOW_VSIZE",
                        "description": "describes the number of samples in the window API."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_API",
                        "description": "describes if the interface is IOBuf/Window (0) or stream (1)"
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_MAX_DELAY",
                        "description": "sets the max threshold on the delay."
                    }
                ],
                "header_file_name": [
                    "sample_delay_graph.hpp"
                ],
                "instance": "class",
                "api_name": "xf::dsp::aie::sample_delay::sample_delay_graph",
                "ports": [
                    {
                        "direction": "input",
                        "type": "input_port xf::dsp::aie::sample_delay::sample_delay_graph< TT_DATA, TP_WINDOW_VSIZE, TP_API, TP_MAX_DELAY >::in",
                        "name": "in"
                    },
                    {
                        "direction": "input",
                        "type": "input_port xf::dsp::aie::sample_delay::sample_delay_graph< TT_DATA, TP_WINDOW_VSIZE, TP_API, TP_MAX_DELAY >::numSampleDelay",
                        "name": "numSampleDelay"
                    },
                    {
                        "direction": "output",
                        "type": "output_port xf::dsp::aie::sample_delay::sample_delay_graph< TT_DATA, TP_WINDOW_VSIZE, TP_API, TP_MAX_DELAY >::out",
                        "name": "out"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::widget::api_cast::widget_api_cast_graph",
            "target_domain": "AIE",
            "spec": {
                "brief": "widget_api_cast is a design to change the interface between connected components. This component is able to change the stream interface to window interface and vice-versa. In addition, multiple input stream ports may be defined, as well as multiple copies of the window output.",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "widget_api_cast_graph",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_DATA",
                        "description": "describes the type of individual data samples input to and output from the function."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_IN_API",
                        "description": "defines the input interface type."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_OUT_API",
                        "description": "defines the output interface type."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_NUM_INPUTS",
                        "description": "describes the number of input stream interfaces to be processed."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_WINDOW_VSIZE",
                        "description": "describes the number of samples in the window API used if either input or output is a window."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_NUM_OUTPUT_CLONES",
                        "description": "sets the number of output ports to write the input data to. Note that while input data from multiple ports is independent, data out is not."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_PATTERN",
                        "description": "sets the interleave or deinterleave pattern for configurations using dual streams, since streams are not considered clones for input nor for output."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_HEADER_BYTES",
                        "description": "sets the number of bytes at the beginning of a window which are not subject to interlace."
                    }
                ],
                "header_file_name": [
                    "widget_api_cast_graph.hpp"
                ],
                "instance": "class",
                "api_name": "xf::dsp::aie::widget::api_cast::widget_api_cast_graph",
                "ports": [
                    {
                        "direction": "input",
                        "type": "port<input> xf::dsp::aie::widget::api_cast::widget_api_cast_graph< TT_DATA, TP_IN_API, TP_OUT_API, TP_NUM_INPUTS, TP_WINDOW_VSIZE, TP_NUM_OUTPUT_CLONES, TP_PATTERN, TP_HEADER_BYTES >::in[TP_NUM_INPUTS]",
                        "name": "in"
                    },
                    {
                        "direction": "output",
                        "type": "port<output> xf::dsp::aie::widget::api_cast::widget_api_cast_graph< TT_DATA, TP_IN_API, TP_OUT_API, TP_NUM_INPUTS, TP_WINDOW_VSIZE, TP_NUM_OUTPUT_CLONES, TP_PATTERN, TP_HEADER_BYTES >::out[TP_NUM_OUTPUT_CLONES]",
                        "name": "out"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        },
        {
            "api_name": "xf::dsp::aie::widget::real2complex::widget_real2complex_graph",
            "target_domain": "AIE",
            "spec": {
                "brief": "widget_real2complex is utility to convert real data to complex or vice versa",
                "search_paths": [
                    "L1/include/aie",
                    "L1/src/aie",
                    "L2/include/aie"
                ],
                "visible": true,
                "target_domain": "AIE",
                "display_name": "widget_real2complex_graph",
                "parameters": [
                    {
                        "type": "typename",
                        "name": "TT_DATA",
                        "description": "describes the type of individual data samples input to the function."
                    },
                    {
                        "type": "typename",
                        "name": "TT_OUT_DATA",
                        "description": "describes the type of individual data samples output from the function."
                    },
                    {
                        "type": "unsigned int",
                        "name": "TP_WINDOW_VSIZE",
                        "description": "describes the number of samples in the window API used if either input or output is a window."
                    }
                ],
                "header_file_name": [
                    "widget_real2complex_graph.hpp"
                ],
                "instance": "class",
                "api_name": "xf::dsp::aie::widget::real2complex::widget_real2complex_graph",
                "ports": [
                    {
                        "direction": "input",
                        "type": "port<input> xf::dsp::aie::widget::real2complex::widget_real2complex_graph< TT_DATA, TT_OUT_DATA, TP_WINDOW_VSIZE >::in",
                        "name": "in"
                    },
                    {
                        "direction": "output",
                        "type": "port<output> xf::dsp::aie::widget::real2complex::widget_real2complex_graph< TT_DATA, TT_OUT_DATA, TP_WINDOW_VSIZE >::out",
                        "name": "out"
                    }
                ],
                "schema": "vitis_libraries_api_list_schema-1.0"
            }
        }
    ],
    "schema": "vitis_libraries_api_list_schema-1.0"
}
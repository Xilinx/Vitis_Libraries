{
    "schema": "vitis_libraries_api_list_schema-1.0",
    "api_list": [
        {
            "api_name": "xf::data_analytics::clustering::kMeansTrain",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::data_analytics::clustering::kMeansTrain",
                "display_name": "kMeansTrain",
                "brief": "k-means is a clustering algorithm that aims to partition n samples into k clusters in which each sample belongs to the cluster with the nearest mean. The implementation is based on \"native k-means\"(also referred to as Lloyd's algorithm). The implemenation aims to change computational complexity O(Nsample * Kcluster * Dim * maxIter) to O(Nsample* (Kcluster/KU)*(Dim/DV)*maxIter) by accelerating calculating distances.Athough more speedup are achieved to as KU*DV grows in theory,KU and DV should be configured properly because the both effect on storing centers on chip. The input data contains : 1) dynamic configures in data[0],including the number of samples,the number of dimensions,the number of clusters,the maximum number of iterations,the distance threshold used for determining whether the iteration is converged. 2) initial centers, which are provided by host and compressed into many 512-bit packages. 3) smaples used for training,which are also compressed. kcenters is used for output best centers only.",
                "target_domain": "PL",
                "visible": false,
                "header_file_name": [
                    "kmeansTrain.hpp"
                ],
                "search_paths": [
                    "../utils/L1/include",
                    "L2/tests/clustering/kmeans/kernel",
                    "L2/include/hw/xf_data_analytics/clustering",
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "data type, supporting float and double"
                    },
                    {
                        "name": "Dim",
                        "type": "int",
                        "description": "the maximum number of dimensions,dynamic number of dimension should be not greater than the maximum."
                    },
                    {
                        "name": "Kcluster",
                        "type": "int",
                        "description": "the maximum number of cluster,dynamic number of cluster should be not greater than the maximum."
                    },
                    {
                        "name": "KU",
                        "type": "int",
                        "description": "unroll factor of Kcluster, KU centers are took part in calculating distances concurrently with one sample. After Kcluster/KU+1 times at most, ouput the minimum distance of a sample and Kcluster centers."
                    },
                    {
                        "name": "DV",
                        "type": "int",
                        "description": "unroll factor of Dim, DV elements in a center are took part in calculating distances concurrently with one sample."
                    }
                ],
                "ports": [
                    {
                        "name": "data",
                        "direction": "input",
                        "type": "ap_uint< 512 > *"
                    },
                    {
                        "name": "kcenters",
                        "direction": "output",
                        "type": "ap_uint< 512 > *"
                    }
                ]
            },
            "target_domain": "PL"
        },
        {
            "api_name": "xf::data_analytics::regression::linearLeastSquareRegressionSGDTrain",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::data_analytics::regression::linearLeastSquareRegressionSGDTrain",
                "display_name": "linearLeastSquareRegressionSGDTrain",
                "brief": "linear least square regression training using SGD framework",
                "target_domain": "PL",
                "visible": false,
                "header_file_name": [
                    "linearRegressionTrain.hpp"
                ],
                "search_paths": [
                    "L2/include/hw/xf_data_analytics/regression",
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "WAxi",
                        "type": "int",
                        "description": "AXI interface width to load training data."
                    },
                    {
                        "name": "D",
                        "type": "int",
                        "description": "Number of features that processed each cycle"
                    },
                    {
                        "name": "Depth",
                        "type": "int",
                        "description": "Depth * D is max feature numbers supported"
                    },
                    {
                        "name": "BurstLen",
                        "type": "int",
                        "description": "of burst read."
                    }
                ],
                "ports": [
                    {
                        "name": "input",
                        "direction": "input",
                        "type": "ap_uint< WAxi > *"
                    },
                    {
                        "name": "output",
                        "direction": "output",
                        "type": "ap_uint< WAxi > *"
                    }
                ]
            },
            "target_domain": "PL"
        },
        {
            "api_name": "xf::data_analytics::regression::ridgeRegressionSGDTrain",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::data_analytics::regression::ridgeRegressionSGDTrain",
                "display_name": "ridgeRegressionSGDTrain",
                "brief": "ridge regression training using SGD framework",
                "target_domain": "PL",
                "visible": false,
                "header_file_name": [
                    "linearRegressionTrain.hpp"
                ],
                "search_paths": [
                    "L2/include/hw/xf_data_analytics/regression",
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "WAxi",
                        "type": "int",
                        "description": "AXI interface width to load training data."
                    },
                    {
                        "name": "D",
                        "type": "int",
                        "description": "Number of features that processed each cycle"
                    },
                    {
                        "name": "Depth",
                        "type": "int",
                        "description": "Depth * D is max feature numbers supported"
                    },
                    {
                        "name": "BurstLen",
                        "type": "int",
                        "description": "of burst read."
                    }
                ],
                "ports": [
                    {
                        "name": "input",
                        "direction": "input",
                        "type": "ap_uint< WAxi > *"
                    },
                    {
                        "name": "output",
                        "direction": "output",
                        "type": "ap_uint< WAxi > *"
                    }
                ]
            },
            "target_domain": "PL"
        },
        {
            "api_name": "xf::data_analytics::regression::LASSORegressionSGDTrain",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::data_analytics::regression::LASSORegressionSGDTrain",
                "display_name": "LASSORegressionSGDTrain",
                "brief": "lasso regression training using SGD framework",
                "target_domain": "PL",
                "visible": false,
                "header_file_name": [
                    "linearRegressionTrain.hpp"
                ],
                "search_paths": [
                    "L2/include/hw/xf_data_analytics/regression",
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "WAxi",
                        "type": "int",
                        "description": "AXI interface width to load training data."
                    },
                    {
                        "name": "D",
                        "type": "int",
                        "description": "Number of features that processed each cycle"
                    },
                    {
                        "name": "Depth",
                        "type": "int",
                        "description": "Depth * D is max feature numbers supported"
                    },
                    {
                        "name": "BurstLen",
                        "type": "int",
                        "description": "of burst read."
                    }
                ],
                "ports": [
                    {
                        "name": "input",
                        "direction": "input",
                        "type": "ap_uint< WAxi > *"
                    },
                    {
                        "name": "output",
                        "direction": "output",
                        "type": "ap_uint< WAxi > *"
                    }
                ]
            },
            "target_domain": "PL"
        },
        {
            "api_name": "xf::data_analytics::text::reEngine",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::data_analytics::text::reEngine",
                "display_name": "reEngine",
                "brief": "The reEngine executes the input messages with configured RE pattern. The pattern is pre-compiled to a list of instructions and is provied by user through the cfg_buff. Therefore, the reEngine which is based on the hardware regex-VM is dynamically configurable. User could improve the throughput by increasing the template parameter PU_NM to accelerate the matching process by sacrificing the on-board resources.",
                "target_domain": "PL",
                "visible": false,
                "header_file_name": [
                    "re_engine.hpp"
                ],
                "search_paths": [
                    "L2/include/hw/xf_data_analytics/text",
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "PU_NM",
                        "type": "int",
                        "description": "Number of processing units in parallel."
                    },
                    {
                        "name": "INSTR_DEPTH",
                        "type": "int",
                        "description": "The depth of instruction buffer in 64-bit."
                    },
                    {
                        "name": "CCLASS_NM",
                        "type": "int",
                        "description": "Supported max number of character classes in regular expression pattern."
                    },
                    {
                        "name": "CPGP_NM",
                        "type": "int",
                        "description": "Supported max number of capturing group in regular expression pattern."
                    },
                    {
                        "name": "MSG_LEN",
                        "type": "int",
                        "description": "Supported max length for each message in 8-byte."
                    },
                    {
                        "name": "STACK_SIZE",
                        "type": "int",
                        "description": "Max size of internal stack buffer in regex-VM."
                    }
                ],
                "ports": [
                    {
                        "name": "cfg_in_buff",
                        "direction": "input",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "msg_in_buff",
                        "direction": "input",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "len_in_buff",
                        "direction": "input",
                        "type": "ap_uint< 16 > *"
                    },
                    {
                        "name": "out_buff",
                        "direction": "output",
                        "type": "ap_uint< 32 > *"
                    }
                ]
            },
            "target_domain": "PL"
        }
    ]
}
